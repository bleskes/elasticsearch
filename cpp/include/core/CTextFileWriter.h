/*
 * ELASTICSEARCH CONFIDENTIAL
 *
 * Copyright (c) 2016 Elasticsearch BV. All Rights Reserved.
 *
 * Notice: this software, and all information contained
 * therein, is the exclusive property of Elasticsearch BV
 * and its licensors, if any, and is protected under applicable
 * domestic and foreign law, and international treaties.
 *
 * Reproduction, republication or distribution without the
 * express written consent of Elasticsearch BV is
 * strictly prohibited.
 */
#ifndef INCLUDED_ml_core_CTextFileWriter_h
#define INCLUDED_ml_core_CTextFileWriter_h

#include <core/ImportExport.h>

#include <string>


namespace ml
{
namespace core
{

//! \brief
//! A simple class to encapsulate writing to a file
//!
//! DESCRIPTION:\n
//! A simple class to encapsulate writing to a file
//!
//! IMPLEMENTATION DECISIONS:\n
//! This will create a file and truncates an
//! existing file with E_Start
//!
//! On Windows, it's optional whether linefeed characters are converted
//! to the Windows standard carriage return-linefeed pair.  This is
//! because for data generated within the program itself, it makes
//! sense to do the conversion, because the C/C++ internal standard is
//! just to use a linefeed character, whereas for opaque binary data
//! we're reading from one file and writing to another, it makes sense
//! not to modify the data stream in any way.
//!
class CORE_EXPORT CTextFileWriter
{
    public:
        //! Where to start writing
        enum EPosition
        {
            E_Start = 0,
            E_End
        };

    public:
        //! The translateCrLf flag only affects Windows - it should be set to
        //! true when writing data generated by C/C++ code using the convention
        //! of \n for line endings, and false when writing data that's been
        //! read/sent from a file/program in binary mode.
        //! The allowRename flag only affects Windows - it should be set when
        //! writing files that it's acceptable for another program to rename
        //! whilst we're writing.  (On Unix it's always possible for another
        //! program to rename the file we're writing to, and even on Windows
        //! this may be the case with certain filesystems.  However, with NTFS
        //! open files cannot be renamed by default.)
        CTextFileWriter(bool translateCrLf, bool allowRename = false);
        ~CTextFileWriter(void);

        //! Initialise the given a file name
        bool    init(const std::string &fileName, EPosition pos);

        //! Write to the file
        bool    write(const std::string &str);

        //! Write a line to the file
        bool    writeLine(const std::string &str);

        //! Accessor
        const std::string   &fileName(void) const;

        //! Has this file been initialised?
        bool    isOpen(void) const;

        //! Close the file
        void    close(void);

    private:
        CTextFileWriter(const CTextFileWriter &);
        CTextFileWriter &operator=(const CTextFileWriter &);

    private:
        bool        m_TranslateCrLf;
        bool        m_AllowRename;
        std::string m_FileName;
        int         m_Fd;
};


}
}

#endif // INCLUDED_ml_core_CTextFileWriter_h

