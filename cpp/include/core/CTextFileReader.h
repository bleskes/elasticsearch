/*
 * ELASTICSEARCH CONFIDENTIAL
 *
 * Copyright (c) 2016 Elasticsearch BV. All Rights Reserved.
 *
 * Notice: this software, and all information contained
 * therein, is the exclusive property of Elasticsearch BV
 * and its licensors, if any, and is protected under applicable
 * domestic and foreign law, and international treaties.
 *
 * Reproduction, republication or distribution without the
 * express written consent of Elasticsearch BV is
 * strictly prohibited.
 */
#ifndef INCLUDED_ml_core_CTextFileReader_h
#define INCLUDED_ml_core_CTextFileReader_h

#include <core/ImportExport.h>

#include <string>


namespace ml
{
namespace core
{

//! \brief
//! A simple class to encapsulate reading from to a file
//!
//! DESCRIPTION:\n
//! A simple class to encapsulate reading from to a file
//!
//! IMPLEMENTATION DECISIONS:\n
//! On Windows, it's optional whether linefeed characters are converted
//! from the Windows standard carriage return-linefeed pair.  This is
//! because for data to be processed within the program itself, it makes
//! sense to do the conversion, because the C/C++ internal standard is
//! just to use a linefeed character, whereas for opaque binary data
//! we're reading from one file and writing to another, it makes sense
//! not to modify the data stream in any way.
//!
class CORE_EXPORT CTextFileReader
{
    public:
        //! The translateCrLf flag only affects Windows - it should be set to
        //! true when reading data generated by C/C++ code using the convention
        //! of \n for line endings, and false when reading data that's been
        //! read/sent from a file/program in binary mode
        CTextFileReader(bool translateCrLf);

        //! Read file to text
        bool readFileToText(const std::string &fileName,
                            std::string &text);

    private:
        bool m_TranslateCrLf;
};


}
}

#endif // INCLUDED_ml_core_CTextFileReader_h

