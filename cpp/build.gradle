description = 'Builds the Ml Engine native binaries'

import org.elastic.gradle.UploadS3Task

String artifact_name = 'ml-cpp' +
    (project.isWindows ? "-windows-x86_64" : (project.isMacOsX ? "-darwin-x86_64" :
    (project.isLinux ? "-linux-x86_64" : "-sunos-x86_64")))

project.ext.make = (project.isMacOsX || project.isWindows) ? "gnumake" : (project.isLinux ? "make" : "gmake")
project.ext.numCpus = Runtime.runtime.availableProcessors()

task clean(type: Exec) {
    enabled = project.cppEnabled
    commandLine bash
    args '-c', 'source ./set_env.sh && rm -rf ../cppdistribution && rm -rf build && ' + make + ' clean'
    workingDir "${projectDir}"
}

task compile(type: Exec) {
    enabled = project.cppEnabled
    commandLine bash
    args '-c', 'source ./set_env.sh && ' + make + ' -j' + numCpus + ' objcompile'
    workingDir "${projectDir}"
}

task make(type: Exec) {
    enabled = project.cppEnabled
    commandLine bash
    args '-c', 'source ./set_env.sh && ' + make + ' -j' + numCpus
    workingDir "${projectDir}"
    dependsOn 'compile'
}

task strip(type: Exec) {
    enabled = project.cppEnabled
    commandLine bash
    args '-c', 'source ./set_env.sh && ./strip_binaries.sh'
    workingDir "${projectDir}"
    dependsOn 'make'
}

def zipSpec = copySpec {
  from("${rootDir}/cppdistribution") {
    // Don't copy Windows import libraries
    exclude "**/*.lib"
    // Don't copy the test support library
    exclude "**/libPreTest.*"
    includeEmptyDirs = false
  }
}

task buildZip(type: Zip) {
  dependsOn strip
  baseName = artifact_name
  with zipSpec
  destinationDir = file("${buildDir}/distributions")
  version = project.version
}

configurations {
  archives
}

artifacts {
  archives buildZip
}

task test(type: Exec) {
    enabled = project.cppEnabled
    commandLine bash
    args '-c', 'source ./set_env.sh && ' + make + ' -j' + numCpus + ' test'
    workingDir "${projectDir}"
    dependsOn 'buildZip'
    description = 'Run cpp tests'
}

task check {
    enabled = project.cppEnabled
    dependsOn 'test'
    description = 'Run all verification tasks'
}

task assemble {
    enabled = project.cppEnabled
    dependsOn 'buildZip'
    description = 'Assemble the cpp part of ml'
}

task build(dependsOn: [check, assemble]) {
  group = 'Build'
  description = 'Assembles and tests the cpp part of ml'
}

task upload(type: UploadS3Task, dependsOn: [build]) {
  enabled = project.cppEnabled && project.uploadEnabled
  description = 'upload cpp zip to S3 Bucket'
  bucket 'prelert-artifacts'
  upload buildZip.outputs.files.singleFile, "maven/${project.group}/ml-cpp/${project.version}/${buildZip.outputs.files.singleFile.name}"
}
