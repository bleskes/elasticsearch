<?xml version="1.0" encoding="UTF-8"?>
<project name="Prelert CA OEM API" default="build" basedir=".">
	<description>
		Build file for the Prelert OData API
	</description>

	<property environment="env" />
	
	<!-- Set base directory properties -->
	<property name="project.basedir" value="." />
	<property name="gui.basedir" value="../.." />
    <property name="source.basedir" value="../../.." />
	<property name="resources" location="${gui.basedir}/resources" />

	<!-- Read Platfrom specfic property file --> 
	<condition property="property_file" value="${resources}/ant/build_linux.properties">
		<os name="Linux" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_osx.properties">
		<os family="mac" />
	</condition>
	
	<condition property="property_file" value="${resources}/ant/build_solaris_sparc.properties">
        <os name="SunOS" arch="sparc" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_solaris_x86.properties">
		<os name="SunOS" />
	</condition>

	<!-- Before checking for Windows, check if we're running within an msysgit shell -->
	<condition property="property_file" value="${resources}/ant/build_mingw.properties">
		<isset property="env.MSYSTEM" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_win.properties">
		<!-- Due to the test above, this means native Windows -->
		<os family="windows" />
	</condition>

	<fail message="Could not set plaftorm property file">
		<condition>
			<not>
				<isset property="property_file" />
			</not>
		</condition>
	</fail>
	
	<echo message="Using ${property_file}"/>

	<property file="${property_file}" />

	<!-- Set global properties for this build -->
	<property name="name" value="prelertApi"/>
	<property name="src" location="${gui.basedir}/src" />    
	<property name="resources" location="${gui.basedir}/resources" />
	<property name="web.dir" location="${project.basedir}/web" />
    <property name="build.dir" location="${project.basedir}/build" />
  	<property name="test.dir" location="${project.basedir}/tests" />
   	<property name="test.build.dir" location="${test.dir}/build" />
    <property name="build.java.dir" location="${build.dir}/classes" />
    <property name="build.web.dir" location="${build.dir}/web" />
	<property name="git.basedir" location="${gui.basedir}/.." />
	<property name="prelert.home" location="${env.PRELERT_HOME}" />
	<property name="prelert.home.tomcat" location="${prelert.home}/cots/apache-tomcat" />


	<property name="apache.basedir" location="${libs.basedir}/apache" />
	<property name="tomcat.libsdir" location="${apache.basedir}/tomcat-6.0.29/lib" />
	<property name="apache.commons.basedir" location="${apache.basedir}/commons" />

    <!-- boot classpath -->
    <path id="boot.classpath">   
        <fileset dir="${java6.bootstrap.path}">
            <include name="rt.jar" />
        </fileset>   
    </path>

	<!-- Classpath for server-side classes -->
	<path id="build.classpath">
		<fileset dir="${tomcat.libsdir}">
			<include name="servlet-api.jar" />
		</fileset>
        
        <fileset dir="${libs.basedir}/aopalliance-1.0">
			<include name="aopalliance.jar" />
        </fileset>
        
        <!-- BoneCP -->
		<fileset dir="${libs.basedir}/bonecp-0.7.1">
			<include name="bonecp-0.7.1.RELEASE.jar" />
        </fileset>        

		<fileset dir="${libs.basedir}/google/guava-14.0.1">
			<include name="guava-14.0.1.jar" />
        </fileset>  
        
        <fileset dir="${libs.basedir}/slf4j-1.7.5">
			<include name="slf4j-api-1.7.5.jar" />
			<include name="slf4j-log4j12-1.7.5.jar" />
        </fileset>  
        
		<!-- Apache Commons JARs -->
		<fileset dir="${apache.commons.basedir}/commons-configuration-1.8">
			<include name="commons-configuration-1.8.jar" />
        </fileset>

		<fileset dir="${apache.commons.basedir}/commons-lang-2.6">
			<include name="commons-lang-2.6.jar" />
		</fileset>		        
        
        <fileset dir="${apache.commons.basedir}/commons-logging-1.1.1">
			<include name="commons-logging-1.1.1.jar" />
		</fileset>	    
        
        <!-- Json-Simple JAR -->
		<fileset dir="${libs.basedir}/json-simple">
			<include name="json-simple-1.1.1.jar" />
		</fileset>    

		<!-- log4j JAR -->
		<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
			<include name="log4j-1.2.16.jar" />
		</fileset>
        
        <!-- OData -->
		<fileset dir="${libs.basedir}/odata4j-archive-0.7/bundles">
			<include name="odata4j-0.7.0-nojpabundle.jar" />
		</fileset>      
        
        <!-- PostgreSQL driver -->
		<fileset dir="${libs.basedir}/psqlJDBC">
			<include name="postgresql-9.2-1001.jdbc4.jar" />
		</fileset>  
        
        <!-- Spring -->
        <!-- JARs required by Spring -->
		<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
			<include name="org.springframework.aop-3.0.5.RELEASE.jar" />
			<include name="org.springframework.asm-3.0.5.RELEASE.jar" />
			<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
			<include name="org.springframework.context-3.0.5.RELEASE.jar" />
			<include name="org.springframework.core-3.0.5.RELEASE.jar" />
			<include name="org.springframework.expression-3.0.5.RELEASE.jar" />
			<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
			<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
		</fileset>                    
	</path>
    
    <!-- JUnit Path -->
	<path id="junit.path">
		<fileset dir="${libs.basedir}/junit-4.8.2">
			<include name="junit-4.8.2.jar" />
		</fileset>	
	</path>


    <!-- Jar files required for the Consumer tests -->
    	<!-- SuperCSV -->
    <path id="consumertest.path">
    	<!-- CLW version 9.x -->
        <fileset dir="${libs.basedir}/Introscope/CLW/Introscope 9.0.6.5">
			<include name="CLWorkstation.jar" />
		</fileset>
        
		<fileset dir="${libs.basedir}/SuperCSV-1.52/">
			<include name="SuperCSV-1.52.jar" />
		</fileset>
	</path>

	<target name="genver" description="Generate BuildInfo.java containing the correct version/build numbers">
		<ant dir="${gui.basedir}" antfile="genver.xml" inheritAll="false" />
	</target>


	<target name="compile" depends="genver" description="compile the source">
		<!-- Compiles the Java source code -->
		<echo message="Compiling the Prelert ODATA API classes" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.java.dir}" />

        <!-- setting sourcepath="" means only files explicity included are compiled -->
		<javac sourcepath="" srcdir="${src}" destdir="${build.java.dir}" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
            <bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
			<classpath>
				<path refid="build.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>
            
            <include name="com/prelert/api/**" />
            <include name="com/prelert/dao/*" />  
            <include name="com/prelert/dao/postgresql/**" />
            <include name="com/prelert/dao/spring/**" />
            <include name="com/prelert/data/*" />          
            <include name="com/prelert/proxy/data/ExternalDataTypeConfig.java" />         
            <include name="com/prelert/proxy/data/ExternalTimeSeriesConfig.java" />         
            <include name="com/prelert/proxy/inputmanager/DataCollectionMode.java" />   
            <include name="com/prelert/proxy/inputmanager/PrelertBackendTCPClient.java" />             
            <include name="com/prelert/proxy/inputmanager/dao/*" /> 
            <include name="com/prelert/server/ServerUtil.java" />
            <include name="com/prelert/web/XMLFilePropertiesPersister.java" />
            <include name="com/prelert/proxy/regex/RegExUtilities.java" />
                        			
            <exclude name="com/prelert/api/test/**" />                      
		</javac>
	</target>


	<target name="build" depends="compile"
		description="Builds and Jars the API classes">
     
  		<mkdir dir="${build.web.dir}" />
		<mkdir dir="${build.web.dir}/WEB-INF" />
		<mkdir dir="${build.web.dir}/WEB-INF/lib" />
        

		<copy toDir="${build.web.dir}/WEB-INF">
            <fileset dir="${web.dir}/WEB-INF" />
        </copy>

       
        <!-- Get the build number -->
        <condition property="build.number" value="${env.PRELERT_BUILD_NUM}" else="DEVELOPMENT BUILD by ${user.name}">
            <isset property="env.PRELERT_BUILD_NUM" />        
        </condition>
        
        <!-- Read in version properties -->
        <property file="${git.basedir}/version.properties"/> 
        
        <echo message="Jaring the API classes" />
        
		<!-- JAR up the server-side classes -->
		<jar destfile="${build.web.dir}/WEB-INF/lib/${name}.jar" basedir="${build.java.dir}">
            <manifest>
                <attribute name="Version" value="${version.major}.${version.minor}.${version.revision}"/>
                <attribute name="Build" value="${build.number}"/>
            </manifest>  
        </jar>
	</target>

    
	<target name="build-war" depends="build" description="Build and package the .war file">
		<echo message="Deploying the Prelert API to Tomcat" />

		<!-- Copy the required JARs to the WEB-INF/lib directory -->
		<copy todir="${build.web.dir}/WEB-INF/lib" flatten="true">
			<path refid="build.classpath" />
		</copy>
        
        <echo file="${build.web.dir}/version.properties" message="version=${version.major}.${version.minor}.${version.revision}" />
        
        <!-- Build the WAR file -->
		<jar jarfile="${build.dir}/${name}.war" basedir="${build.web.dir}" excludes="**/Thumbs.db" />
	</target>
        


	<target name="prelert-home-install" depends="build-war" description="Deploys the most recent .war file to the correct location under $PRELERT_HOME">
		<echo message="Copying .war and Tomcat context file to $PRELERT_HOME" />

		<!-- Create the logs directory used in production -->
		<mkdir dir="${prelert.home}/logs/api"/>            

        <!-- Copy the API demo database -->
        <!-- DON'T INSTALL THE DEMO DATABASE BY DEFAULT. FOR CA OEM THIS WILL BE SHIPPED SEPARATELY 
        <mkdir dir="${prelert.home}/scripts"/>
        <copy file="${api_demo.path}/api_integration_test_db.sql" todir="${prelert.home}/scripts" overwrite="true"/>
    	-->
        
		<!-- Copy the WAR file to the Tomcat webapps directory -->
		<mkdir dir="${prelert.home.tomcat}/webapps"/>
		<delete dir="${prelert.home.tomcat}/webapps/${name}"/>
		<copy file="${build.dir}/${name}.war" todir="${prelert.home.tomcat}/webapps" overwrite="true"/>
	</target>


	<target name="deploy-tomcat" depends="build-war" description="Deploys the Prelert Query API to Tomcat">
		<echo message="Deploying the Prelert API to Tomcat" />
               
        <!-- Copy the WAR file to the Tomcat webapps directory -->
		<delete dir="${deploy.path}/${name}"/>
		<copy file="${build.dir}/${name}.war" todir="${deploy.path}"/>
	</target>
    

	<target name="clean" description="Clean .class files from the output directories">          
        <!-- Delete compiled class files and the War -->
		<delete dir="${build.dir}" failonerror="false"/>        
        <delete dir="${test.build.dir}" failonerror="false"/> 
        <delete file="${test.dir}/tests.log" failonerror="false"/>       
	</target>
    
    
    <target name="build-tests" depends="build" description="Create JUnit tests">	
		<!-- Compiles the JUnit tests -->
		<echo message="Compiling JUnit tests for the Prelert Query API" />

		<mkdir dir="${test.build.dir}"/>
                		
		<path id="build_tests.classpath">	
			<path refid="junit.path" /> 
			<path refid="build.classpath"/>					
            <pathelement path="${build.java.dir}" />
		</path>
	
        <!-- setting sourcepath="" means only files explicity included are compiled -->
		<javac sourcepath="" srcdir="${src}" destdir="${test.build.dir}" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
            <bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
			<classpath>
				<path refid="build_tests.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>            
            
            <include name="com/prelert/api/test/**" />
            <exclude name="com/prelert/api/test/clw/*" />
            <exclude name="com/prelert/api/test/producer/*" />
            <exclude name="com/prelert/api/test/consumer/*" />                        
		</javac>		
	</target>
       
    
    <target name="test" depends="build-tests" description="Run the Query API Unit tests">
		<!-- Execute unit tests -->
        <path id="tests.classpath">	
			<path refid="junit.path" /> 
            <path refid="build.classpath"/>
			<pathelement path="${test.build.dir}"/>		
            <pathelement path="${build.java.dir}" />			
		</path>

		<delete file="${test.dir}/tests.log" failonerror="false" />        
        <copy file="${test.dir}/junit_log4j.properties" tofile="${test.build.dir}/log4j.properties"/>
        <copy file="${source.basedir}/config/xsd/tagged_points.xsd" todir="${test.build.dir}"/>
                
                                                            							
		<echo message="Running the unit tests" />            

		<junit haltonfailure="yes">
            <sysproperty key="prelert.test.logs" value="${test.dir}" />            
                        
            <test name="com.prelert.api.test.BeanOPropertiesTest" />
            <test name="com.prelert.api.test.ExpressionParserTest" />
            <test name="com.prelert.api.test.DataToXmlPointsTest" />
            <test name="com.prelert.api.test.MetricFeedConversionTest" />
            <test name="com.prelert.api.test.MetricConfigConvesionTest" />
                                                
			<formatter type="plain" usefile="false" />
			<classpath refid="tests.classpath" />
		</junit>		
	</target>
    
    
    <!-- TO RUN TESTS:
        copy odata4j-0.7.0-bundle.jar and json-simple-1.1.1.jar into the same directory as prelertApiConsumer.jar 
        
        java -jar prelertApiConsumer.jar
        OR
        java -jar prelertApiConsumer.jar host:port/servicename
    -->
    <target name="build-consumer-test" depends="genver" description="Build and the API consumer test">        
        
        <mkdir dir="${test.build.dir}/consumer"/>
        <mkdir dir="${test.build.dir}/consumer/source"/>
        <mkdir dir="${test.build.dir}/consumer/docs"/>
        
        <!-- Get the build number -->
        <condition property="build.number" value="${env.PRELERT_BUILD_NUM}" else="DEVELOPMENT BUILD by ${user.name}">
            <isset property="env.PRELERT_BUILD_NUM" />        
        </condition>        
        
        <!-- Read in version properties -->
        <property file="${git.basedir}/version.properties"/> 
        
        
        <!-- setting sourcepath="" means only files explicity included are compiled -->
		<javac sourcepath="" srcdir="${src}" destdir="${test.build.dir}/consumer" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
            <bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
			<classpath>
				<path refid="build.classpath" />
                <path refid="consumertest.path" /> 
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>            
            
            <include name="com/prelert/api/test/clw/*" />                        
            <include name="com/prelert/api/test/consumer/*" />                        
		</javac>
        
        
        <!-- Create the java doc -->
        <javadoc packagenames="com.prelert.api.test.consumer, com.prelert.api.test.clw" sourcepath="${src}" destdir="${test.build.dir}/consumer/docs">
            <classpath>
				<path refid="build.classpath" />
                <path refid="consumertest.path" /> 
			</classpath>
            <doctitle><![CDATA[<h1>Prelert ODATA API Integration Test</h1>]]></doctitle>
            <footer>Version: ${version.major}.${version.minor}.${version.revision}&lt;br/&gt;
                    Build: ${build.number}
            </footer>
        </javadoc>        
    
        
        <!-- Copy the build file -->
        <copy file="build_consumer_test.xml" tofile="${test.build.dir}/consumer/build.xml" /> 
        
        <!-- log4j -->
        <copy file="${test.dir}/log4j.properties" todir="${test.build.dir}/consumer" /> 
        
        <!-- copy source code for the tests -->
        <copy todir="${test.build.dir}/consumer/source/com/prelert/api/test/consumer/" >
            <fileset dir="${src}/com/prelert/api/test/consumer/"/>
        </copy>
        <copy todir="${test.build.dir}/consumer/source/com/prelert/api/test/clw/" >
            <fileset dir="${src}/com/prelert/api/test/clw/"/>
        </copy>

    
        
        <echo message="Jaring the consumer test classes" />
        
		<!-- JAR up the server-side classes -->
		<jar destfile="${test.build.dir}/prelertApiConsumer.jar" basedir="${test.build.dir}/consumer">
            <manifest>
                <attribute name="Version" value="${version.major}.${version.minor}.${version.revision}"/>
                <attribute name="Build" value="${build.number}"/>
                <attribute name="Main-Class" value="com.prelert.api.test.consumer.ConsumerTest"/>
                <attribute name="Class-Path" value="odata4j-0.7.0-bundle.jar json-simple-1.1.1.jar"/>
            </manifest>  
        </jar>
	</target>

</project>
