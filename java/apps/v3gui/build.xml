<?xml version="1.0" encoding="UTF-8"?>
<project name="V3 GUI msysgit" default="build" basedir=".">
	<description>
		Build file for the V3 Prelert GUI project.
	</description>

	<property environment="env" />
	
	<!-- Set base directory properties -->
	<property name="project.basedir" value="." />
	<property name="java.basedir" value="../.." />
	<property name="resources" location="${java.basedir}/resources" />

	<!-- Read Platfrom specfic property file --> 
	<condition property="property_file" value="${resources}/ant/build_linux.properties">
		<os name="Linux" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_osx.properties">
		<os family="mac" />
	</condition>
	
	<condition property="property_file" value="${resources}/ant/build_solaris_sparc.properties">
        <os name="SunOS" arch="sparc" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_solaris_x86.properties">
		<os name="SunOS" />
	</condition>

	<!-- Before checking for Windows, check if we're running within an msysgit shell -->
	<condition property="property_file" value="${resources}/ant/build_mingw.properties">
		<isset property="env.MSYSTEM" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_win.properties">
		<!-- Due to the test above, this means native Windows -->
		<os family="windows" />
	</condition>

	<fail message="Could not set plaftorm property file">
		<condition>
			<not>
				<isset property="property_file" />
			</not>
		</condition>
	</fail>
	
	<echo message="Using ${property_file}"/>

	<property file="${property_file}" />

	<!-- Set global properties for this build -->
	<property name="name" value="prelert"/>
	<property name="src" location="${java.basedir}/src" />
	<property name="src.war" location="${project.basedir}/war" />
	<property name="src.config" location="${resources}/config" />
	<property name="resources" location="${java.basedir}/resources" />
	<property name="build" location="${project.basedir}/build" />
	<property name="build.web.dir" value="${build}/war"/>
	<property name="git.basedir" location="${java.basedir}/.." />
	<property name="prelert.home" location="${env.PRELERT_HOME}" />
	<property name="prelert.home.tomcat" location="${prelert.home}/cots/apache-tomcat" />

	<property name="gwt.entrypoint.class" value="com.prelert.Splash" />
	<property name="gwt.module.shortname" value="splash" />
	<property name="gwt.sdk.location" location="${libs.basedir}/gwt-2.4.0" />
	<property name="ext.gwt.sdk.location" location="${libs.basedir}/gxt-2.2.5" />

	<property name="code.drop.dir" value="${project.basedir}/backup"/>

	<property name="apache.basedir" location="${libs.basedir}/apache" />
	<property name="tomcat.libsdir" location="${apache.basedir}/tomcat-6.0.29/lib" />
	<property name="apache.commons.basedir" location="${apache.basedir}/commons" />

	<!-- GWT Compile Classpath -->
	<path id="gwt.compile.classpath">
		<pathelement location="${gwt.sdk.location}/gwt-user.jar" />
		<pathelement location="${gwt.sdk.location}/gwt-dev.jar" />
		<pathelement location="${gwt.sdk.location}/validation-api-1.0.0.GA.jar" />
		<pathelement location="${gwt.sdk.location}/validation-api-1.0.0.GA-sources.jar" />
		<pathelement location="${ext.gwt.sdk.location}/gxt-2.2.5-gwt22.jar" />
		<pathelement location="${src}" />
		<pathelement location="${libs.basedir}/gchart-2.7/gchart.jar" />
		<pathelement location="${libs.basedir}/gwt-incubator/gwt-incubator-20101117-r1766.jar"/>
	</path>


	<!-- boot classpath -->
    <path id="boot.classpath">   
        <fileset dir="${java6.bootstrap.path}">
            <include name="rt.jar" />
        </fileset>   
    </path>

	<!-- Classpath for server-side classes -->
	<path id="build.classpath">
		<fileset dir="${tomcat.libsdir}">
			<include name="servlet-api.jar" />
		</fileset>

		<!-- GWT JARs -->
		<fileset dir="${gwt.sdk.location}">
			<include name="gwt-servlet.jar" />
		</fileset>

		<!-- Ext GWT JARs -->
		<fileset dir="${ext.gwt.sdk.location}">
			<include name="gxt-2.2.5-gwt22.jar" />
		</fileset>
		
		<!-- Apache Commons JARs -->
		<fileset dir="${apache.commons.basedir}/commons-codec-1.6">
			<include name="commons-codec-1.6.jar" />
        </fileset>
		<fileset dir="${apache.commons.basedir}/commons-configuration-1.8">
			<include name="commons-configuration-1.8.jar" />
        </fileset>
		<fileset dir="${apache.commons.basedir}/commons-lang-2.6">
			<include name="commons-lang-2.6.jar" />
		</fileset>
		

		<!-- Apache log4j JAR -->
		<!-- log4j JAR -->
		<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
			<include name="log4j-1.2.16.jar" />
		</fileset>
		
		<!-- Apache PDFBox JARs -->
		<fileset dir="${apache.basedir}/pdfbox-1.4.0">
			<include name="fontbox-1.4.0.jar" />
			<include name="pdfbox-1.4.0.jar" />
		</fileset>

		<!-- Spring JARs -->
		<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
			<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
			<include name="org.springframework.context-3.0.5.RELEASE.jar" />
			<include name="org.springframework.core-3.0.5.RELEASE.jar" />
			<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
			<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
		</fileset>
		
		<!-- Spring Security JARs -->
		<fileset dir="${libs.basedir}/spring-security-3.0.5/dist">
			<include name="spring-security-core-3.0.5.RELEASE.jar" />
		</fileset>
		
		<!-- Super CSV JAR -->
		<fileset dir="${libs.basedir}/SuperCSV-1.52">
			<include name="SuperCSV-1.52.jar" />
		</fileset>
		
	</path>


	<target name="genver" description="Generate BuildInfo.java containing the correct version/build numbers">
		<ant dir="${java.basedir}" antfile="genver.xml" inheritAll="false" />
	</target>


	<target name="init-eclipse-project" depends="genver" description="Copies over 3rd party files necessary to run application in Eclipse">
		<echo message="Initialising Eclipse project" />

		<!-- Copy the GXT components to the WAR direcory-->
		<mkdir dir="${src.war}/gxt" />
		<copy todir="${src.war}/gxt/css">
			<fileset dir="${ext.gwt.sdk.location}/resources/css"/>
		</copy>
		<copy todir="${src.war}/gxt/images">
			<fileset dir="${ext.gwt.sdk.location}/resources/images"/>
		</copy>

		<!-- Copy the necessary JARs to the WEB-INF/lib directory -->
		<mkdir dir="${src.war}/WEB-INF/lib" />
		<copy todir="${src.war}/WEB-INF/lib">

			<!-- GWT JARs -->
			<fileset dir="${gwt.sdk.location}">
				<include name="gwt-servlet.jar" />
			</fileset>

			<!-- Ext GWT JARs -->
			<fileset dir="${ext.gwt.sdk.location}">
				<include name="gxt-2.2.5-gwt22.jar" />
			</fileset>

			<!-- log4j JAR -->
			<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
				<include name="log4j-1.2.16.jar" />
			</fileset>

			<!-- Apache Commons JARS -->
			<fileset dir="${apache.commons.basedir}/commons-codec-1.6">
                <include name="commons-codec-1.6.jar" />
            </fileset>
			<fileset dir="${apache.commons.basedir}/commons-configuration-1.8">
				<include name="commons-configuration-1.8.jar" />
	        </fileset>
			<fileset dir="${apache.commons.basedir}/commons-dbcp-1.4">
				<include name="commons-dbcp-1.4.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-lang-2.6">
				<include name="commons-lang-2.6.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-logging-1.1.1">
				<include name="commons-logging-1.1.1.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-pool-1.5.5">
				<include name="commons-pool-1.5.5.jar" />
			</fileset>

			<!-- MySQL Connector -->
			<fileset dir="${libs.basedir}/mysql-connector-java-5.1.14">
				<include name="mysql-connector-java-5.1.14-bin.jar" />
			</fileset>

			<!-- PostgreSQL driver -->
			<fileset dir="${libs.basedir}/psqlJDBC">
				<include name="postgresql-9.2-1001.jdbc4.jar" />
			</fileset>

			<!-- Spring JARs -->
			<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
				<include name="org.springframework.aop-3.0.5.RELEASE.jar" />
				<include name="org.springframework.asm-3.0.5.RELEASE.jar" />
				<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
				<include name="org.springframework.context-3.0.5.RELEASE.jar" />
				<include name="org.springframework.core-3.0.5.RELEASE.jar" />
				<include name="org.springframework.expression-3.0.5.RELEASE.jar" />
				<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
				<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
			</fileset>
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
			<!-- Spring Security JARs -->
			<fileset dir="${libs.basedir}/spring-security-3.0.5/dist">
				<include name="spring-security-config-3.0.5.RELEASE.jar" />
				<include name="spring-security-core-3.0.5.RELEASE.jar" />
				<include name="spring-security-web-3.0.5.RELEASE.jar" />
			</fileset>
			
			<!-- JSTL jars -->
			<fileset dir="${apache.basedir}/jakarta-taglibs-standard-1.1.2/lib">
				<include name="jstl.jar" />
				<include name="standard.jar" />
			</fileset>

		</copy>

	</target>
	
	
	<target name="gwt-copy-resources" description="Copies shared resources (images, CSS etc) into 
		an application sub-directory for testing of client-side code">
		
		<echo message="Copying resource files needed to test the GWT client-side code from Eclipse" />

		<mkdir dir="${src.war}/css/shared" />
		<mkdir dir="${src.war}/images/shared" />
		<mkdir dir="${src.war}/WEB-INF/jsp" />
		
		<!-- Copy the images -->
		<echo message="Copying images files" />
		<copy file="${resources}/prelert_icon.ico" tofile="${src.war}/prelert_icon.ico" />
		<copy todir="${src.war}/images/shared">
			<fileset dir="${resources}/images"/>
		</copy>
		
		<!-- Copy the stylesheets -->
		<echo message="Copying CSS files" />
		<copy todir="${src.war}/css/shared">
			<fileset dir="${resources}/css"/>
		</copy>
		
		<!-- Copy the JSPs -->
		<echo message="Copying JSP files" />
		<copy todir="${src.war}/WEB-INF/jsp">
			<fileset dir="${resources}/jsp"/>
		</copy>
		
	</target>


	<target name="gwt-compile" depends="gwt-copy-resources" description="Compiles the GWT classes to generate static content">
		<!-- Compilation of the GWT classes to static content -->
		<echo message="Compiling the GWT classes to generate static content" />

		<mkdir dir="${build}/compiled_gwt" />

		<java failonerror="true" classpathref="gwt.compile.classpath" classname="com.google.gwt.dev.Compiler" fork="true">
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xss16M"/>
			<jvmarg value="-Xmx512M"/>
			<arg value="-localWorkers" />
			<arg value="${gwt.compile.workers}" />
			<arg value="-war" />
			<arg value="${build}/compiled_gwt" />
			<arg value="${gwt.entrypoint.class}" />
		</java>
	</target>
	
	
	<target name="gwt-compile-report" description="Compiles the GWT classes and generates a GWT compile report">
		<!-- Compilation of the GWT classes to generate a GWT compile report -->
		<echo message="Compiling the GWT classes and generating compile report" />

		<mkdir dir="${build}/compiled_gwt" />

		<java classpathref="gwt.compile.classpath" classname="com.google.gwt.dev.Compiler" fork="true">
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xss16M"/>
			<jvmarg value="-Xmx512M"/>
			<arg value="-compileReport"/>
			<arg value="-extra"/>
			<arg value="gwtCompileReport"/>
			<arg value="-war" />
			<arg value="${build}/compiled_gwt" />
			<arg value="${gwt.entrypoint.class}" />
		</java>
	</target>


	<target name="compile" depends="genver" description="compile the source">
		<!-- Compiles the Java source code -->
		<echo message="Compiling the server-side classes" />

		<mkdir dir="${src.war}/WEB-INF/classes"/>

		<javac srcdir="${src}" destdir="${src.war}/WEB-INF/classes" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
			<bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>            
			<classpath>
				<path refid="build.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>

			<include name="com/prelert/dao/**"/>
			<include name="com/prelert/data/**"/>
			<include name="com/prelert/server/**"/>
			<include name="com/prelert/service/**"/>
			<include name="com/prelert/web/**"/>
			
			<!-- Exclude functionality specific to the CA APM (Introscope) Diagnostics UI for now -->
			<exclude name="com/prelert/dao/proxy/configuration/**"/>
			<exclude name="com/prelert/data/introscope/**"/>
			<exclude name="com/prelert/data/gxt/introscope/**"/>
			<exclude name="com/prelert/server/introscope/**"/>
			<exclude name="com/prelert/service/introscope/**"/>
		</javac>

		<echo message="Copying resources for JAR file" />
        
        <copy file="${src.config}/log4j.properties" todir="${src.war}/WEB-INF/classes" />

		<copy todir="${src.war}/WEB-INF/classes">
			<fileset dir="${resources}/messages">
				<include name="*.properties" />
			</fileset>
		</copy>
		
		<copy todir="${src.war}/WEB-INF/classes/com/prelert/server">
			<fileset dir="${src}/com/prelert/server">
				<include name="logo_white.jpg" />
			</fileset>
		</copy>

	</target>


	<target name="build_common" depends="compile"
		description="Builds the database-independent parts of the application">

		<echo message="Building the common components for the web application" />

		<mkdir dir="${build.web.dir}" />
		<mkdir dir="${build.web.dir}/css" />
		<mkdir dir="${build.web.dir}/images" />
		<mkdir dir="${build.web.dir}/${gwt.module.shortname}" />
		<mkdir dir="${build.web.dir}/gxt" />
		<mkdir dir="${build.web.dir}/gxt/css" />
		<mkdir dir="${build.web.dir}/gxt/images" />
		<mkdir dir="${build.web.dir}/WEB-INF/jsp" />
		<mkdir dir="${build.web.dir}/WEB-INF/lib" />

		<!-- Copy the GWT static content -->
		<copy todir="${build.web.dir}">
			<fileset dir="${src.war}">
				<include name="*.jsp" />
				<include name="Splash.html" />
				<include name="prelert_icon.ico" />
			</fileset>
		</copy>
		<copy todir="${build.web.dir}/css">
			<fileset dir="${src.war}/css"/>
		</copy>
		<copy todir="${build.web.dir}/images">
			<fileset dir="${src.war}/images"/>
		</copy>

		<copy todir="${build.web.dir}/splash">
			<fileset dir="${build}/compiled_gwt/splash"/>
		</copy>

		<!-- Copy the GXT components -->
		<copy todir="${build.web.dir}/gxt/css">
			<fileset dir="${ext.gwt.sdk.location}/resources/css"/>
		</copy>
		<copy todir="${build.web.dir}/gxt/images">
			<fileset dir="${ext.gwt.sdk.location}/resources/images"/>
		</copy>
		
		<!-- Copy the JSPs -->
		<copy todir="${build.web.dir}/WEB-INF/jsp">
			<fileset dir="${src.war}/WEB-INF/jsp"/>
		</copy>

		<!-- Copy the Spring bean definition file to the WEB-INF directory -->
		<copy todir="${build.web.dir}/WEB-INF">
			<fileset dir="${src.war}/WEB-INF">
				<include name="client.properties" />
				<include name="prelert-servlet.xml" />
				<include name="securityContext.xml" />
			</fileset>
		</copy>

		<copy file="${src.war}/WEB-INF/web.xml" tofile="${build.web.dir}/WEB-INF/web.xml" />

       
        <!-- Get the build number -->
        <condition property="build.number" value="${env.PRELERT_BUILD_NUM}" else="DEVELOPMENT BUILD by ${user.name}">
            <isset property="env.PRELERT_BUILD_NUM" />        
        </condition>
        
        <!-- Read in version properties -->
        <property file="${git.basedir}/version.properties"/> 
        
		<!-- JAR up the server-side classes -->
		<jar destfile="${build.web.dir}/WEB-INF/lib/${name}.jar" basedir="${src.war}/WEB-INF/classes">
            <manifest>
                <attribute name="Version" value="${version.major}.${version.minor}.${version.revision}"/>
                <attribute name="Build" value="${build.number}"/>
            </manifest>  
        </jar>

		<!-- Copy the necessary JARs to the WEB-INF/lib directory -->
		<copy todir="${build.web.dir}/WEB-INF/lib">

			<!-- GWT JARs -->
			<fileset dir="${gwt.sdk.location}">
				<include name="gwt-servlet.jar" />
			</fileset>

			<!-- Ext GWT JARs -->
			<fileset dir="${ext.gwt.sdk.location}">
				<include name="gxt-2.2.5-gwt22.jar" />
			</fileset>

			<!-- log4j JAR -->
			<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
				<include name="log4j-1.2.16.jar" />
			</fileset>

			<!-- Apache Commons JARs -->
			<fileset dir="${apache.commons.basedir}/commons-codec-1.6">
                <include name="commons-codec-1.6.jar" />
            </fileset>
			<fileset dir="${apache.commons.basedir}/commons-configuration-1.8">
				<include name="commons-configuration-1.8.jar" />
	        </fileset>
			<fileset dir="${apache.commons.basedir}/commons-dbcp-1.4">
				<include name="commons-dbcp-1.4.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-lang-2.6">
				<include name="commons-lang-2.6.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-logging-1.1.1">
				<include name="commons-logging-1.1.1.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-pool-1.5.5">
				<include name="commons-pool-1.5.5.jar" />
			</fileset>
			
			<!-- Apache PDFBox JARs -->
			<fileset dir="${apache.basedir}/pdfbox-1.4.0">
				<include name="fontbox-1.4.0.jar" />
				<include name="pdfbox-1.4.0.jar" />
			</fileset>

			<!-- Spring JARs -->
			<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
				<include name="org.springframework.aop-3.0.5.RELEASE.jar" />
				<include name="org.springframework.asm-3.0.5.RELEASE.jar" />
				<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
				<include name="org.springframework.context-3.0.5.RELEASE.jar" />
				<include name="org.springframework.core-3.0.5.RELEASE.jar" />
				<include name="org.springframework.expression-3.0.5.RELEASE.jar" />
				<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
				<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
			</fileset>
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
			<!-- Spring Security JARs -->
			<fileset dir="${libs.basedir}/spring-security-3.0.5/dist">
				<include name="spring-security-config-3.0.5.RELEASE.jar" />
				<include name="spring-security-core-3.0.5.RELEASE.jar" />
				<include name="spring-security-web-3.0.5.RELEASE.jar" />
			</fileset>

			<!-- JSTL JARs -->
			<fileset dir="${apache.basedir}/jakarta-taglibs-standard-1.1.2/lib">
				<include name="jstl.jar" />
				<include name="standard.jar" />
			</fileset>
			
			<!-- Super CSV JARs -->
			<fileset dir="${libs.basedir}/SuperCSV-1.52">
				<include name="spiffy-with_source-all-0.05.jar" />
				<include name="SuperCSV-1.52.jar" />
			</fileset>

		</copy>

	</target>


	<target name="build" depends="build_proxy"
		description="Generates the default distribution">
	</target>


	<target name="build_all_proxy" depends="gwt-compile, build_proxy"
		description="Generates the proxy distribution, including GWT">
	</target>


	<target name="build_all_postgres" depends="gwt-compile, build_postgres"
		description="Generates the PostgreSQL distribution, including GWT">
	</target>


	<target name="build_all_mysql" depends="gwt-compile, build_mysql"
		description="Generates the MySQL distribution, including GWT">
	</target>


	<target name="build_all" depends="gwt-compile, build"
		description="Generates the default distribution, including GWT">
	</target>


	<target name="build_postgres" depends="build_common" 
		description="Generates the distribution for a PostgreSQL database">
		<echo message="Building the V3 Prelert GUI application for a PostgreSQL database" />


		<!-- Copy the Spring applicationContext.xml file -->
		<delete file="${build.web.dir}/WEB-INF/applicationContext.xml" />
		<copy file="${src.war}/WEB-INF/applicationContext.xml" todir="${build.web.dir}/WEB-INF" />

		<copy todir="${build.web.dir}/WEB-INF/lib">

			<!-- PostgreSQL driver -->
			<fileset dir="${libs.basedir}/psqlJDBC">
				<include name="postgresql-9.2-1001.jdbc4.jar" />
			</fileset>
		</copy>
        
        <!-- Add the version number to the war file. -->
        <echo file="${build.web.dir}/version.properties" message="version=${version.major}.${version.minor}.${version.revision}" />        

		<!-- Build the WAR file -->
		<jar jarfile="${build}/${name}.war" basedir="${build.web.dir}" excludes="**/Thumbs.db" />

	</target>
	
	<target name="build_proxy" depends="build_common" 
		description="Generates the distribution for the Proxy">
		<echo message="Building the V3 Prelert GUI application for a Proxy access." />

		<!-- Copy the Spring applicationContext.xml file -->
		<delete file="${build.web.dir}/WEB-INF/applicationContext.xml" />
		<copy file="${src.war}/WEB-INF/applicationContextProxy.xml" 
			tofile="${build.web.dir}/WEB-INF/applicationContext.xml" />

        <!-- Add the version number to the war file. -->
        <echo file="${build.web.dir}/version.properties" message="version=${version.major}.${version.minor}.${version.revision}" />
        
		<!-- Build the WAR file -->
		<jar jarfile="${build}/${name}.war" basedir="${build.web.dir}" excludes="**/Thumbs.db" />

	</target>


	<target name="build_mysql" depends="build_common" 
		description="Generates the distribution for a MySQL database">
		<echo message="Building the V3 Prelert GUI application for a MySQL database" />

		<!-- Copy the Spring applicationContext.xml file -->
		<delete file="${build.web.dir}/WEB-INF/applicationContext.xml" />
		<copy file="${src.war}/WEB-INF/applicationContextMySQL.xml" 
			tofile="${build.web.dir}/WEB-INF/applicationContext.xml" />

		<copy todir="${build.web.dir}/WEB-INF/lib">

			<!-- MySQL Connector -->
			<fileset dir="${libs.basedir}/mysql-connector-java-5.1.14">
				<include name="mysql-connector-java-5.1.14-bin.jar" />
			</fileset>
		</copy>
        

        <!-- Add the version number to the war file. -->
        <echo file="${build.web.dir}/version.properties" message="version=${version.major}.${version.minor}.${version.revision}" />

		<!-- Build the WAR file -->
		<jar jarfile="${build}/${name}.war" basedir="${build.web.dir}" excludes="**/Thumbs.db" />

	</target>


	<target name="prelert-home-install" description="Deploys the most recent prelert.war to the correct location under $PRELERT_HOME">
		<echo message="Copying prelert.war and Tomcat context file to $PRELERT_HOME" />

		<!-- Copy the WAR file to the Tomcat webapps directory -->
		<mkdir dir="${prelert.home.tomcat}/webapps"/>
		<delete dir="${prelert.home.tomcat}/webapps/${name}"/>
		<copy file="${build}/${name}.war" todir="${prelert.home.tomcat}/webapps" overwrite="true"/>        
        <!-- Create folder for the installer -->
        <mkdir dir="${prelert.home.tomcat}/conf/Catalina/localhost/"/>

		<!-- Create the logs directory used in production -->
		<mkdir dir="${prelert.home}/logs/gui"/>
	</target>


	<target name="deploy" depends="build_postgres" description="Deploys the V3 GUI web application for a PostgreSQL database to Tomcat">
		<echo message="Deploying the V3 Prelert GUI to Tomcat" />

		<!-- Copy the WAR file to the Tomcat webapps directory -->
		<delete dir="${deploy.path}/${name}"/>
		<copy file="${build}/${name}.war" todir="${deploy.path}"/>

		<!-- 
            Copy the Tomcat context file. Dev only, this is not done in the production release
            Tomcat will watch this file and reload the app if it changes.
        -->
		<copy file="${src.config}/tomcat_context.xml" tofile="${appserver.home}/conf/Catalina/localhost/${name}.xml" 
				overwrite="true" />
	</target>
    
    <target name="deploy-proxy" depends="build_proxy" description="Deploys the V3 GUI web application for the Proxy to Tomcat">
		<echo message="Deploying the V3 Prelert GUI to Tomcat" />

		<!-- Copy the WAR file to the Tomcat webapps directory -->
		<delete dir="${deploy.path}/${name}"/>
		<copy file="${build}/${name}.war" todir="${deploy.path}"/>

		<!-- 
            Copy the Tomcat context file. Dev only, this is not done in the production release
            Tomcat will watch this file and reload the app if it changes.
        -->
		<copy file="${src.config}/tomcat_context.xml" tofile="${appserver.home}/conf/Catalina/localhost/${name}.xml" 
				overwrite="true" />
	</target>


	<target name="gwt-deploy" depends="gwt-compile, deploy" description="Deploys application for a PostgreSQL database">
		<echo message="Compiling GWT module and deploying the V3 Prelert GUI for a PostgreSQL database" />

	</target>
    
    

	<target name="undeploy" description="Un-deploy application">
		<delete>
			<fileset dir="${deploy.path}/${name}">
				<include name="**/*.*" />
			</fileset>
		</delete>
		<delete file="${build}/${name}.war"/>
	</target>


	<target name="clean" depends="clean-gwt" description="Clean .class files and GWT files from output directories">

		<!-- It's crucial to delete the .war file itself, because otherwise
			Ant won't regenerate it in the case where config files HAVE
			changed but Java source files HAVEN'T changed -->
		<delete file="${build}/${name}.war" failonerror="false" verbose="true"/>

		<mkdir dir="${src.war}/WEB-INF/classes" />
      
        <!-- Delete the properties files -->
		<delete>
			<fileset dir="${src.war}/WEB-INF/classes">
				<include name="*"/>
			</fileset>
		</delete>  

		<!-- Delete the server-side classes -->
		<delete>
			<fileset dir="${src.war}/WEB-INF/classes">
				<include name="**/*.class"/>
			</fileset>
		</delete>

		<!-- Delete the GWT compilation output -->
		<delete failonerror="false">
			<fileset dir="${build}/compiled_gwt/${gwt.module.shortname}">
				<include name="**/*.*" />
			</fileset>
		</delete>

		<delete dir="${build.web.dir}"/>

	</target>


	<target name="clean-gwt" description="Clean the GWT build files from output directories">

		<!-- Delete the GWT compilation output -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build}/compiled_gwt/${gwt.module.shortname}" includes="**/*" />
			<fileset dir="${build}/compiled_gwt/WEB-INF" includes="**/*" />
			<fileset dir="${build}/gwt-unitCache" includes="**/*" />
		</delete>

		<echo message="Deleting from ${build.web.dir}/splash" />
		<delete failonerror="false">
			<fileset dir="${build.web.dir}/splash">
				<include name="**/*.gwt.rpc" />
				<include name="**/*.cache.html" />
				<include name="**/*.cache.png" />
			</fileset>
		</delete>
		
		<echo message="Deleting compile report output from gwtCompileReport" />
		<delete dir="gwtCompileReport"/>

	</target>


	<target name="codedrop" description="Copies source code and associated files to single directory">
		<echo message="Copying source to single directory" />

		<mkdir dir="${code.drop.dir}" />
		<mkdir dir="${code.drop.dir}/config" />
		<mkdir dir="${code.drop.dir}/src" />
		<mkdir dir="${code.drop.dir}/war" />

		<!-- Copy the build files -->
		<copy todir="${code.drop.dir}">
			<fileset dir="${project.basedir}">
				<include name="build.xml" />
				<include name="*.properties" />
			</fileset>
		</copy>

		<!-- Copy the config files -->
		<copy todir="${code.drop.dir}/config">
			<fileset dir="${src.config}">
				<include name="*.properties" />
				<include name="*.xml" />
			</fileset>
		</copy>

		<!-- Copy the UI Java source files -->
		<copy todir="${code.drop.dir}/src">
			<fileset dir="${src}">
				<include name="**/*.java" />
				<include name="**/*.png" />
				<include name="**/*.properties" />
				<exclude name="com/prelert/proxy/**" />
				<exclude name="adlex/**" />
			</fileset>
		</copy>

		<!-- Copy the host html page, CSS stylesheets and images -->
		<copy file="${src}/com/prelert/Splash.gwt.xml" todir="${code.drop.dir}/src/com/prelert"/>
		<copy todir="${code.drop.dir}/war">
			<fileset dir="${src.war}">
				<include name="Splash.html" />
				<include name="*.css" />
				<include name="*.ico" />
				<include name="*.jsp" />
			</fileset>
		</copy>
		<copy todir="${code.drop.dir}/war/css">
			<fileset dir="${src.war}/css"/>
		</copy>
		<copy todir="${code.drop.dir}/war/images">
			<fileset dir="${src.war}/images"/>
		</copy>

		<!-- Copy the web files -->
		<copy todir="${code.drop.dir}/war/WEB-INF">
			<fileset dir="${src.war}/WEB-INF">
				<include name="**/*.jsp" />
				<include name="**/*.properties" />
				<include name="*.xml" />
			</fileset>
		</copy>

		<!-- Zip up the backup directory -->
		<delete file="${code.drop.dir}/v3gui.zip"/>
		<zip destfile="${code.drop.dir}/v3gui.zip" basedir="${code.drop.dir}" />

	</target>


</project>
