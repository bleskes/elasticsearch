<?xml version="1.0" encoding="UTF-8"?>
<project name="Prelert Hadoop" default="build" basedir=".">
	<description>
		Build file for Prelert Hadoop Java classes
	</description>

	<property environment="env" />


	
	<!-- Set base directory properties -->
    <property name="project.basedir" value="." />
    <property name="gui.basedir" value="../.." />
    <property name="resources" location="${gui.basedir}/resources" />
   
    <!-- Read Platfrom specfic property file --> 
    <condition property="property_file" value="${resources}/ant/build_linux.properties">
        <os name="Linux" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_osx.properties">
        <os family="mac" />
    </condition>
    
    <condition property="property_file" value="${resources}/ant/build_solaris_sparc.properties">
        <os name="SunOS" arch="sparc" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_solaris_x86.properties">
        <os name="SunOS" />
    </condition>
	<property name="libs.dir" location="${project.basedir}/libs" />
    
    <!-- The directory the built jar file will be written to. -->
	<property name="jar.output.dir" location="${project.basedir}/jar" />   


        <!-- Before checking for Windows, check if we're running within an msysgit shell -->
    <condition property="property_file" value="${resources}/ant/build_mingw.properties">
        <isset property="env.MSYSTEM" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_win.properties">
        <!-- Due to the test above, this means native Windows -->
        <os family="windows" />
    </condition>

    <fail message="Could not set plaftorm property file">
        <condition>
            <not>
                <isset property="property_file" />
            </not>
        </condition>
    </fail>
    
    <echo message="Using ${property_file}"/>

    <property file="${property_file}" /> 


	<!-- Set global properties for this build -->
    <!-- Set global properties for this build -->
    <property name="name" value="prelertHadoop"/>
    <property name="src.dir" location="${gui.basedir}/src" />    
    <property name="build.dir" location="${project.basedir}/build" />
    <property name="test.dir" location="${project.basedir}/tests" />
    <property name="test.build.dir" location="${test.dir}/build" />
    <property name="git.basedir" location="${gui.basedir}/.." />
    <property name="prelert.home" location="${env.PRELERT_HOME}" />
    <property name="prelert.src.home" location="${env.PRELERT_SRC_HOME}" />
    <property name="hadoop.home" location="${env.HADOOP_HOME}" />
    <property name="apache.basedir" location="${libs.basedir}/apache" />
     
    <!-- boot classpath -->
    <path id="boot.classpath">   
        <fileset dir="${java6.bootstrap.path}">
            <include name="rt.jar" />
        </fileset>   
    </path>

	<!-- Required jar files -->
	<path id="build.classpath">           
        <!-- Hadoop Jars -->
        <fileset dir="${libs.basedir}/hadoop-1.2.1">
            <include name="hadoop-ant-1.2.1.jar" />
            <include name="hadoop-client-1.2.1.jar" />
            <include name="hadoop-core-1.2.1.jar" />
            <include name="hadoop-examples-1.2.1.jar" />
            <include name="hadoop-minicluster-1.2.1.jar" />
            <include name="hadoop-test-1.2.1.jar" />
            <include name="hadoop-tools-1.2.1.jar" />
            <include name="hadoop-streaming-1.2.1.jar" />
        </fileset>   

        <!-- AWS --> 
        <fileset dir="${libs.basedir}/aws-java-sdk-1.5.7">
            <include name="lib/aws-java-sdk-1.5.7.jar" />
            <include name="lib/aws-java-sdk-flow-build-tools-1.5.7.jar" />
            <include name="third-party/httpcomponents-client-4.2.3/httpclient-4.2.3.jar" />
            <include name="third-party/httpcomponents-client-4.2.3/httpcore-4.2.jar" />
            <include name="third-party/commons-codec-1.3/commons-codec-1.3.jar" />
        </fileset>   

        <!-- log4j JAR -->
        <fileset dir="${apache.basedir}/apache-log4j-1.2.16">
            <include name="log4j-1.2.16.jar" />
        </fileset>

        <!-- commons logging -->
        <fileset dir="${apache.basedir}/commons/commons-logging-1.1.1/">
            <include name="commons-logging-1.1.1.jar" />
        </fileset>

        <!-- commons logging -->
        <fileset dir="${apache.basedir}/commons/commons-logging-1.1.1/">
            <include name="commons-logging-1.1.1.jar" />
        </fileset>

        <!-- commons config -->
        <fileset dir="${apache.basedir}/commons/commons-configuration-1.8/">
            <include name="commons-configuration-1.8.jar" />
        </fileset>

        <!-- commons lang -->
        <fileset dir="${apache.basedir}/commons/commons-lang-2.6/">
            <include name="commons-lang-2.6.jar" />
        </fileset>        
	</path>

    <!-- JUnit Path -->
    <path id="junit.path">
        <fileset dir="${libs.basedir}/junit-4.8.2">
            <include name="junit-4.8.2.jar" />
        </fileset>  
    </path>
    
            
    <!-- clean -->
	<target name="clean" description="Clean .class files from the output directories">      
        <echo message="Cleaning build directory and jar file" />
        <delete dir="${build.dir}/com" failonerror="false"/>       
        <delete file="${jar.output.dir}/prelertHadoop.jar" failonerror="false"/>  
	</target>
          
    
    <!-- compile -->
    <target name="compile" description="Compile the Java source code">             
        <echo message="Compiling Java source"/>

        <mkdir dir="${build.dir}"/>

        <!-- setting sourcepath="" means only files explicity included are compiled -->
		<javac sourcepath="" srcdir="${src.dir}" destdir="${build.dir}" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
			 <bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
            
            <classpath>
				<path refid="build.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>            
            
            <include name="com/prelert/hadoop/**" />       
            <exclude name="com/prelert/hadoop/test/**" />                 
		</javac> 
	</target>

   

    <target name="build" depends="compile" description="Build Prelert Hadoop project">               
        <echo message="Jaring the Hadoop project classes" />

        <copy file="${project.basedir}/log4j.properties" todir="${build.dir}" overwrite="true"/>
        
		<!-- JAR up the test classes -->
		<jar destfile="${jar.output.dir}/prelertHadoop.jar" basedir="${build.dir}" excludes="**/*.jar" >
            <manifest>
                <attribute name="Version" value="Uknown"/>

                <!-- Set the main class and required jars -->
                <!-- <attribute name="Main-Class" value="com.prelert.hadoop.HadoopExample"/> -->
                <attribute name="Class-Path" value="."/>
            </manifest>  
        </jar>
	</target>


    <target name="build-wordcount" depends="compile" description="Build the Wordcount jar">        
        <echo message="Building ..." />
        
        <echo message="Jaring the WordCount class" />

        <!-- JAR up the test classes -->
        <jar destfile="${jar.output.dir}/wordcount.jar" basedir="${build.dir}" excludes="**/*.jar"  
            includes="com/prelert/hadoop/example/wordcount/*">

            <manifest>
                <attribute name="Version" value="Uknown"/>

                <!-- Set the main class and required jars -->
                <!--<attribute name="Main-Class" value="com.prelert.hadoop.example.WordCount"/>-->
                <attribute name="Class-Path" value="."/>
            </manifest>  
        </jar>
    </target>


    <target name="install" depends="build" description="Copies jar to HADOOP_HOME/lib">
        <copy file="${jar.output.dir}/prelertHadoop.jar" todir="${hadoop.home}/lib" overwrite="true"/>
    </target>


    <target name="build-tests" depends="build" description="Create JUnit tests">    
        <!-- Compiles the JUnit tests -->
        <echo message="Compiling JUnit tests for the Hadoop API" />

        <mkdir dir="${test.build.dir}"/>
                        
        <path id="build_tests.classpath">   
            <path refid="junit.path" /> 
            <path refid="build.classpath"/>                 
            <pathelement path="${build.dir}" />
        </path>
    
        <!-- setting sourcepath="" means only files explicity included are compiled -->
        <javac sourcepath="" srcdir="${src.dir}" destdir="${test.build.dir}" 
            encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">

            <bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>

            <classpath>
                <path refid="build_tests.classpath" />
            </classpath>
            <compilerarg value="-Xmaxerrs"/>
            <compilerarg value="250"/>            
            
            <include name="com/prelert/hadoop/test/**" />
        </javac>        
    </target>


    <target name="test" depends="build-tests" description="Run the Hadoop API Unit tests">
        <!-- Execute unit tests -->
        <path id="tests.classpath"> 
            <path refid="junit.path" /> 
            <path refid="build.classpath"/>
            <pathelement path="${test.build.dir}"/>     
            <pathelement path="${build.dir}" />            
        </path>
               
                                                                                        
        <echo message="Running the unit tests" />            

        <junit haltonfailure="yes">
            <sysproperty key="PRELERT_SRC_HOME" value="${prelert.src.home}" />            
                        
            <test name="com.prelert.hadoop.test.FieldConfigTest" />
                                                
            <formatter type="plain" usefile="false" />
            <classpath refid="tests.classpath" />
        </junit>        
    </target>    

</project>
