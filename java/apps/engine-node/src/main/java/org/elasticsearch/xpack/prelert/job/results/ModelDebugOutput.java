
package org.elasticsearch.xpack.prelert.job.results;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import org.elasticsearch.xpack.prelert.job.persistence.serialisation.DotNotationReverser;
import org.elasticsearch.xpack.prelert.job.persistence.serialisation.StorageSerialisable;
import org.elasticsearch.xpack.prelert.job.persistence.serialisation.StorageSerialiser;

import java.io.IOException;
import java.util.Date;
import java.util.Objects;

/**
 * Model Debug POJO.
 * Some of the fields being with the word "debug".  This avoids creation of
 * reserved words that are likely to clash with fields in the input data (due to
 * the restrictions on Elasticsearch mappings).
 */
@JsonIgnoreProperties({"id"})
@JsonInclude(Include.NON_NULL)
public class ModelDebugOutput implements StorageSerialisable
{
    public static final String TYPE = "modelDebugOutput";
    public static final String TIMESTAMP = "timestamp";
    public static final String PARTITION_FIELD_NAME = "partitionFieldName";
    public static final String PARTITION_FIELD_VALUE = "partitionFieldValue";
    public static final String OVER_FIELD_NAME = "overFieldName";
    public static final String OVER_FIELD_VALUE = "overFieldValue";
    public static final String BY_FIELD_NAME = "byFieldName";
    public static final String BY_FIELD_VALUE = "byFieldValue";
    public static final String DEBUG_FEATURE = "debugFeature";
    public static final String DEBUG_LOWER = "debugLower";
    public static final String DEBUG_UPPER = "debugUpper";
    public static final String DEBUG_MEDIAN = "debugMedian";
    public static final String ACTUAL = "actual";

    private Date timestamp;
    private String id;
    private String partitionFieldName;
    private String partitionFieldValue;
    private String overFieldName;
    private String overFieldValue;
    private String byFieldName;
    private String byFieldValue;
    private String debugFeature;
    private double debugLower;
    private double debugUpper;
    private double debugMedian;
    private double actual;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public Date getTimestamp()
    {
        return timestamp;
    }

    public void setTimestamp(Date timestamp)
    {
        this.timestamp = timestamp;
    }

    public String getPartitionFieldName()
    {
        return partitionFieldName;
    }

    public void setPartitionFieldName(String partitionFieldName)
    {
        this.partitionFieldName = partitionFieldName;
    }

    public String getPartitionFieldValue()
    {
        return partitionFieldValue;
    }

    public void setPartitionFieldValue(String partitionFieldValue)
    {
        this.partitionFieldValue = partitionFieldValue;
    }

    public String getOverFieldName()
    {
        return overFieldName;
    }

    public void setOverFieldName(String overFieldName)
    {
        this.overFieldName = overFieldName;
    }

    public String getOverFieldValue()
    {
        return overFieldValue;
    }

    public void setOverFieldValue(String overFieldValue)
    {
        this.overFieldValue = overFieldValue;
    }

    public String getByFieldName()
    {
        return byFieldName;
    }

    public void setByFieldName(String byFieldName)
    {
        this.byFieldName = byFieldName;
    }

    public String getByFieldValue()
    {
        return byFieldValue;
    }

    public void setByFieldValue(String byFieldValue)
    {
        this.byFieldValue = byFieldValue;
    }

    public String getDebugFeature()
    {
        return debugFeature;
    }

    public void setDebugFeature(String debugFeature)
    {
        this.debugFeature = debugFeature;
    }

    public double getDebugLower()
    {
        return debugLower;
    }

    public void setDebugLower(double debugLower)
    {
        this.debugLower = debugLower;
    }

    public double getDebugUpper()
    {
        return debugUpper;
    }

    public void setDebugUpper(double debugUpper)
    {
        this.debugUpper = debugUpper;
    }

    public double getDebugMedian()
    {
        return debugMedian;
    }

    public void setDebugMedian(double debugMedian)
    {
        this.debugMedian = debugMedian;
    }

    public double getActual()
    {
        return actual;
    }

    public void setActual(double actual)
    {
        this.actual = actual;
    }

    @Override
    public boolean equals(Object other)
    {
        if (this == other)
        {
            return true;
        }
        if (other instanceof ModelDebugOutput == false)
        {
            return false;
        }
        // id excluded here as it is generated by the datastore
        ModelDebugOutput that = (ModelDebugOutput) other;
        return Objects.equals(this.timestamp, that.timestamp) &&
                Objects.equals(this.partitionFieldValue, that.partitionFieldValue) &&
                Objects.equals(this.partitionFieldName, that.partitionFieldName) &&
                Objects.equals(this.overFieldValue, that.overFieldValue) &&
                Objects.equals(this.overFieldName, that.overFieldName) &&
                Objects.equals(this.byFieldValue, that.byFieldValue) &&
                Objects.equals(this.byFieldName, that.byFieldName) &&
                Objects.equals(this.debugFeature, that.debugFeature) &&
                this.debugLower == that.debugLower &&
                this.debugUpper == that.debugUpper &&
                this.debugMedian == that.debugMedian &&
                this.actual == that.actual;
    }

    @Override
    public int hashCode()
    {
        // id excluded here as it is generated by the datastore
        return Objects.hash(timestamp, partitionFieldName, partitionFieldValue,
                overFieldName, overFieldValue, byFieldName, byFieldValue,
                debugFeature, debugLower, debugUpper, debugMedian, actual);
    }

    @Override
    public void serialise(StorageSerialiser serialiser) throws IOException
    {
        serialiser.addTimestamp(timestamp)
                  .add(DEBUG_FEATURE, debugFeature)
                  .add(DEBUG_LOWER, debugLower)
                  .add(DEBUG_UPPER, debugUpper)
                  .add(DEBUG_MEDIAN, debugMedian)
                  .add(ACTUAL, actual);

        DotNotationReverser reverser = serialiser.newDotNotationReverser();

        if (byFieldName != null)
        {
            serialiser.add(BY_FIELD_NAME, byFieldName);
            if (byFieldValue != null)
            {
                reverser.add(byFieldName, byFieldValue);
            }
        }
        if (byFieldValue != null)
        {
            serialiser.add(BY_FIELD_VALUE, byFieldValue);
        }
        if (overFieldName != null)
        {
            serialiser.add(OVER_FIELD_NAME, overFieldName);
            if (overFieldValue != null)
            {
                reverser.add(overFieldName, overFieldValue);
            }
        }
        if (overFieldValue != null)
        {
            serialiser.add(OVER_FIELD_VALUE, overFieldValue);
        }
        if (partitionFieldName != null)
        {
            serialiser.add(PARTITION_FIELD_NAME, partitionFieldName);
            if (partitionFieldValue != null)
            {
                reverser.add(partitionFieldName, partitionFieldValue);
            }
        }
        if (partitionFieldValue != null)
        {
            serialiser.add(PARTITION_FIELD_VALUE, partitionFieldValue);
        }

        serialiser.addReverserResults(reverser);
    }
}
