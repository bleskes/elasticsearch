
package org.elasticsearch.xpack.prelert.job.results;

import org.elasticsearch.xpack.prelert.job.persistence.serialisation.StorageSerialisable;
import org.elasticsearch.xpack.prelert.job.persistence.serialisation.StorageSerialiser;

import java.io.IOException;
import java.util.Objects;

public class PartitionScore implements StorageSerialisable
{
    private String partitionFieldValue;
    private String partitionFieldName;
    private double anomalyScore;
    private double probability;
    private boolean hadBigNormalisedUpdate;


    public PartitionScore()
    {
        hadBigNormalisedUpdate = false;
    }

    public PartitionScore(String fieldName, String fieldValue, double anomalyScore, double probability)
    {
        this();
        partitionFieldName = fieldName;
        partitionFieldValue = fieldValue;
        this.anomalyScore = anomalyScore;
        this.probability = probability;
    }

    public double getAnomalyScore()
    {
        return anomalyScore;
    }

    public void setAnomalyScore(double anomalyScore)
    {
        this.anomalyScore = anomalyScore;
    }

    public String getPartitionFieldName()
    {
        return partitionFieldName;
    }

    public void setPartitionFieldName(String partitionFieldName)
    {
        this.partitionFieldName = partitionFieldName;
    }

    public String getPartitionFieldValue()
    {
        return partitionFieldValue;
    }

    public void setPartitionFieldValue(String partitionFieldValue)
    {
        this.partitionFieldValue = partitionFieldValue;
    }

    public double getProbability()
    {
        return probability;
    }

    public void setProbability(double probability)
    {
        this.probability = probability;
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(partitionFieldName, partitionFieldValue,
                probability, anomalyScore);
    }

    @Override
    public boolean equals(Object other)
    {
        if (this == other)
        {
            return true;
        }

        if (other instanceof PartitionScore == false)
        {
            return false;
        }

        PartitionScore that = (PartitionScore)other;

        // hadBigNormalisedUpdate is deliberately excluded from the test
        // as is id, which is generated by the datastore
        return Objects.equals(this.partitionFieldValue, that.partitionFieldValue)
                && Objects.equals(this.partitionFieldName, that.partitionFieldName)
                && (this.probability == that.probability)
                && (this.anomalyScore == that.anomalyScore);
    }

    @Override
    public void serialise(StorageSerialiser serialiser)
            throws IOException
    {
        serialiser.add(AnomalyRecord.PARTITION_FIELD_NAME.getPreferredName(), partitionFieldName);
        serialiser.add(AnomalyRecord.PARTITION_FIELD_VALUE.getPreferredName(), partitionFieldValue);
        serialiser.add(AnomalyRecord.PROBABILITY.getPreferredName(), probability);
        serialiser.add(AnomalyRecord.ANOMALY_SCORE.getPreferredName(), anomalyScore);
    }

    public boolean hadBigNormalisedUpdate()
    {
        return hadBigNormalisedUpdate;
    }

    public void resetBigNormalisedUpdateFlag()
    {
        hadBigNormalisedUpdate = false;
    }

    public void raiseBigNormalisedUpdateFlag()
    {
        hadBigNormalisedUpdate = true;
    }
}
