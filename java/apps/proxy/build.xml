<?xml version="1.0" encoding="UTF-8"?>
<project name="Prelert Proxy" default="build" basedir=".">
	<description>
		Build file for the Prelert Proxy.
	</description>

	<property environment="env" />
	
	<!-- Set base directory properties -->
	<property name="project.basedir" value="." />
	<property name="gui.basedir" value="../.." />
	<property name="resources" location="${gui.basedir}/resources" />

	<!-- Read Platfrom specfic property file --> 
	<condition property="property_file" value="${resources}/ant/build_linux.properties">
		<os name="Linux" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_osx.properties">
		<os family="mac" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_solaris_sparc.properties">
        <os name="SunOS" arch="sparc" />
    </condition>

    <condition property="property_file" value="${resources}/ant/build_solaris_x86.properties">
		<os name="SunOS" />
	</condition>

	<!-- Before checking for Windows, check if we're running within an msysgit shell -->
	<condition property="property_file" value="${resources}/ant/build_mingw.properties">
		<isset property="env.MSYSTEM" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_win.properties">
		<!-- Due to the test above, this means native Windows -->
		<os family="windows" />
	</condition>

	<fail message="Could not set plaftorm property file">
		<condition>
			<not>
				<isset property="property_file" />
			</not>
		</condition>
	</fail>
	
	<echo message="Using ${property_file}"/>

 	<property file="${property_file}" />
	
	<echo message="Using ${libs.basedir}"/>
	
	<condition property="pg.user" value="${env.PGUSER}">
		<isset property="env.PGUSER" />
	</condition>
	
	<condition property="pg.user" value="${user.name}">
		<not>
			<isset property="env.PGUSER" />
		</not>
	</condition>

	<echo message="pguser = ${pg.user}" />
	

	<!-- Set global properties for this build -->
	<property name="name" value="prelert"/>
	<property name="src.dir" location="${gui.basedir}/src" />
	<property name="build.dir" location="${project.basedir}/build" />
	<property name="test.dir" location="${project.basedir}/tests" />
    <property name="test.build.dir" location="${test.dir}/build" />
	<property name="code.drop.dir" location="${project.basedir}/backup"/>
	<property name="proxy.config.dir" location="${project.basedir}/config"/>
    <property name="tmp.proxy.config.dir" location="${project.basedir}/tmpconfig"/>
	<property name="test.config.dir" location="${test.dir}/config" />
    <property name="tmp.test.config.dir" location="${test.dir}/tmpconfig" />
	<property name="git.basedir" location="${gui.basedir}/.." />
	<property name="prelert.home" location="${env.PRELERT_HOME}" />	
    <property name="prelert.home.config" value="${prelert.home}/config" />
	<property name="prelert.home.proxy" value="${prelert.home}/proxy" />
	
	<property name="JUnit.location" value="${libs.basedir}/junit-4.8.2/junit-4.8.2.jar"/>		
	<property name="apache.basedir" location="${libs.basedir}/apache" />
	<property name="apache.commons.basedir" location="${apache.basedir}/commons" />
	
	<!-- JARs required by Spring -->
	<path id="spring.path">
		<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
			<include name="org.springframework.aop-3.0.5.RELEASE.jar" />
			<include name="org.springframework.asm-3.0.5.RELEASE.jar" />
			<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
			<include name="org.springframework.context-3.0.5.RELEASE.jar" />
			<include name="org.springframework.core-3.0.5.RELEASE.jar" />
			<include name="org.springframework.expression-3.0.5.RELEASE.jar" />
			<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
			<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
		</fileset>
	</path>
		
	<!-- boot classpath -->
    <path id="boot.classpath">   
        <fileset dir="${java6.bootstrap.path}">
            <include name="rt.jar" />
            <include name="jce.jar" />
        </fileset>   
    </path>
    
	<!-- Apache log4j JAR Path -->
	<path id="log4j.path">
		<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
			<include name="log4j-1.2.16.jar" />
		</fileset>	
	</path>
			
	<!-- Apache Commons JARS -->
	<path id="apache-commons.path">
		<fileset dir="${apache.commons.basedir}/commons-dbcp-1.4">
			<include name="commons-dbcp-1.4.jar" />
		</fileset>
        <fileset dir="${apache.commons.basedir}/commons-lang-2.6">
            <include name="commons-lang-2.6.jar" />
        </fileset>
		<fileset dir="${apache.commons.basedir}/commons-logging-1.1.1">
			<include name="commons-logging-1.1.1.jar" />
		</fileset>
		<fileset dir="${apache.commons.basedir}/commons-pool-1.5.5">
			<include name="commons-pool-1.5.5.jar" />
		</fileset>	
        <fileset dir="${apache.commons.basedir}/commons-codec-1.6">
            <include name="commons-codec-1.6.jar" />
        </fileset>
	</path>
	
	<!-- Classpath for server-side classes -->
	<path id="build.classpath">
		<!-- Apache log4j -->
		<path refid="log4j.path" />
		
		<!-- Apache Commons JARS -->
		<path refid="apache-commons.path" />
		
		<!-- JARs required by Spring -->
		<path refid="spring.path" />
	</path>

	<path id="postgreSQL.connector">
		<fileset dir="${libs.basedir}/psqlJDBC">
			<include name="postgresql-9.2-1001.jdbc4.jar" /> 
		</fileset>
	</path>
	
	<path id="mySQL.connector">
		<fileset dir="${libs.basedir}/mysql-connector-java-5.1.14/">
			<include name="mysql-connector-java-5.1.14-bin.jar" /> 
		</fileset>
	</path>
		
	<!-- Introscope Command Line Workstation  -->
    <path id="introscopeClw9.path">
		<fileset dir="${libs.basedir}/Introscope/CLW/Introscope 9.0.6.5">
			<include name="CLWorkstation.jar" />
		</fileset>
	</path>
	
	<!-- Jar files required by the plugins when running the unit tests. -->
	<path id="plugin.dependencies.path">
        <fileset dir="${apache.commons.basedir}/commons-discovery-0.4">
			<include name="commons-discovery-0.4.jar" />
		</fileset>
        	<!-- Apache Axis JAR Path -->
		<fileset dir="${apache.basedir}/axis-1.4/lib">
			<include name="axis.jar" />
			<include name="jaxrpc.jar" />
			<!-- May need to add SAAJ too -->
		</fileset>
        
       	<!-- SuperCSV -->
		<fileset dir="${libs.basedir}/SuperCSV-1.52/">
			<include name="SuperCSV-1.52.jar" />
		</fileset>
	</path>
	
	<target name="genver" description="Generate BuildInfo.java containing the correct version/build numbers">
		<ant dir="${gui.basedir}" antfile="genver.xml" inheritAll="false" />
	</target>

	<!-- Clean each plugin -->
	<target name="clean-plugins" description="Clean the Plugins for the Prelert Proxy">
		<ant dir="." antfile="build_plugin_vantage.xml" target="clean" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_introscope.xml" target="clean" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_localdatabase.xml" target="clean" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_olbm.xml" target="clean" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_vsphere.xml" target="clean" inheritAll="false" />
		<ant dir="." antfile="build_plugin_scom.xml" target="clean" inheritAll="false" />
		<ant dir="." antfile="build_plugin_jdbc.xml" target="clean" inheritAll="false" />
		<ant dir="." antfile="build_plugin_netqos.xml" target="clean" inheritAll="false" />
        <ant dir="." antfile="build_plugin_openapi.xml" target="clean" inheritAll="false" />
        <ant dir="." antfile="build_plugin_itrs.xml" target="clean" inheritAll="false" />
	</target>

	<!-- Build each plugin -->
	<target name="build-plugins" description="Build the Plugins for the Prelert Proxy">
		<ant dir="." antfile="build_plugin_vantage.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_introscope.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_localdatabase.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_olbm.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_vsphere.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_scom.xml" target="build" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_jdbc.xml" target="build" inheritAll="false" /> 
        <ant dir="." antfile="build_plugin_netqos.xml" target="build" inheritAll="false" /> 
        <ant dir="." antfile="build_plugin_openapi.xml" target="build" inheritAll="false" />        
        <ant dir="." antfile="build_plugin_itrs.xml" target="build" inheritAll="false" />        
	</target>

	<!-- Install each plugin -->
	<target name="prelert-home-install-plugins" description="Install the Plugins for the Prelert Proxy to $PRELERT_HOME">
		<ant dir="." antfile="build_plugin_vantage.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_introscope.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_localdatabase.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_olbm.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_vsphere.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_scom.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_jdbc.xml" target="prelert-home-install" inheritAll="false" /> 
		<ant dir="." antfile="build_plugin_netqos.xml" target="prelert-home-install" inheritAll="false" />         
        <ant dir="." antfile="build_plugin_openapi.xml" target="prelert-home-install" inheritAll="false" />
        <ant dir="." antfile="build_plugin_itrs.xml" target="prelert-home-install" inheritAll="false" />                
	</target>


	<target name="compile" depends="genver, build-plugins" description="compile the source">
		<!-- Compiles the Java source code -->
		<echo message="Compiling the Proxy classes" />

		<mkdir dir="${build.dir}"/>

		<javac sourcepath="" srcdir="${src.dir}" destdir="${build.dir}" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
			<bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
			<classpath>
				<path refid="build.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>

            <include name="com/prelert/process/**" />
            <include name="com/prelert/proxy/**"/> 
            <include name="com/prelert/dao/*" />
            <include name="com/prelert/data/**" />            
            <include name="com/prelert/dao/postgresql/**" />
            <include name="com/prelert/dao/mysql/**" />
            <include name="com/prelert/dao/spring/**" />
            <include name="com/prelert/server/ServerUtil.java" />
			
            <exclude name="com/prelert/data/gxt/**" />
			<exclude name="com/prelert/proxy/test/**"/>
			<exclude name="com/prelert/proxy/plugin/**" />
			<exclude name="com/prelert/devutils/**" />
		</javac>
	</target>


	<target name="setup-download-build" description="Sets up the build for the download product">
		<echo message="Setting run policy for download build" />
		<property name="run.policy" value="download"/>
		<copy file="${src.dir}/com/prelert/proxy/runpolicy/RunPolicyDownloadProduct.java.template" 
				tofile="${src.dir}/com/prelert/proxy/runpolicy/RunPolicy.java" overwrite="true"
				verbose="true"/>
	</target>
    
	<target name="setup-full-build" description="Sets up the build for the download product">
		<echo message="Setting run policy for full build" />
		<property name="run.policy" value="full"/>
		<copy file="${src.dir}/com/prelert/proxy/runpolicy/RunPolicyFullProduct.java.template" 
				tofile="${src.dir}/com/prelert/proxy/runpolicy/RunPolicy.java" overwrite="true"
				verbose="true"/>
	</target>

    <target name="build" depends="build-download-product" description="Builds the default product"/>

    <target name="build-download-product" depends="setup-download-build, compile" description="Builds the download product"/>
    
    <target name="build-full-product" depends="setup-full-build, compile" description="Builds the full product"/>
	
       
	<target name="deploy-mysql" description="install the MySQL configuration files">
		<delete file="${proxy.config.dir}/dataSource.xml"/>
		<delete file="${proxy.config.dir}/pluginLocator.xml"/>
		<delete file="${proxy.config.dir}/prelertDAOs.xml"/>
	
		<copy file="${proxy.config.dir}/dataSourceMySQL.xml" tofile="${proxy.config.dir}/dataSource.xml"/>
		<copy file="${proxy.config.dir}/pluginLocatorMySQL.xml" tofile="${proxy.config.dir}/pluginLocator.xml"/>
		<copy file="${proxy.config.dir}/prelertDAOsMySQL.xml" tofile="${proxy.config.dir}/prelertDAOs.xml"/>	
	</target>
	
	
	<target name="deploy-postgres" description="install the PostgreSQL configuration files">
		<delete file="${proxy.config.dir}/dataSource.xml"/>
		<delete file="${proxy.config.dir}/pluginLocator.xml"/>
		<delete file="${proxy.config.dir}/prelertDAOs.xml"/>
	
		<copy file="${proxy.config.dir}/dataSourcePostgreSQL.xml" tofile="${proxy.config.dir}/dataSource.xml"/>
		<copy file="${proxy.config.dir}/pluginLocatorPostgreSQL.xml" tofile="${proxy.config.dir}/pluginLocator.xml"/>
		<copy file="${proxy.config.dir}/prelertDAOsPostgreSQL.xml" tofile="${proxy.config.dir}/prelertDAOs.xml"/>		
	</target>
	
	
	<target name="prelert-home-deploy" description="Copies built jar and config files into ${prelert.home}">
					
		<echo message="Installing jar files into ${prelert.home.proxy}/lib" />
		
		<mkdir dir="${prelert.home.proxy}"/>
		<mkdir dir="${prelert.home.proxy}/lib"/>
		<mkdir dir="${prelert.home}/logs"/>
		<mkdir dir="${prelert.home.config}/proxy"/>

        <!-- It helps the Windows installer if these 3 directories exist even
             if they're not needed -->
		<mkdir dir="${prelert.home.config}/proxy/plugins"/>
		<mkdir dir="${prelert.home.config}/proxy/datatypes"/>
		<mkdir dir="${prelert.home.config}/proxy/templates"/>
        
        <condition property="build.number" value="${env.PRELERT_BUILD_NUM}" else="DEVELOPMENT BUILD by ${user.name}">
            <isset property="env.PRELERT_BUILD_NUM" />        
        </condition>
        
        <!-- Read in version properties -->
		<property file="${git.basedir}/version.properties"/> 
               

		<!-- Here we exclude the individual plugin classes, as these must go in
			 separate .jar files -->
		<jar destfile="${prelert.home.proxy}/lib/proxy.jar" 			
			basedir="${build.dir}"
			excludes="adlex/**, com/prelert/proxy/plugin/*/*/**, com/prelert/proxy/test/**, com/prelert/devutils/**">
            <manifest>
                <attribute name="Version" value="${version.major}.${version.minor}.${version.revision}"/>
                <attribute name="Build" value="${build.number}"/>
                <attribute name="RunPolicy" value="${run.policy}"/>
            </manifest>          
        </jar>

		<copy todir="${prelert.home.proxy}/lib" flatten="true">
			<path refid="spring.path" />
			<path refid="log4j.path" />
			<path refid="apache-commons.path" />
			<path refid="postgreSQL.connector" />
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
		</copy>
		
        <echo message="Installing config files into ${prelert.home.config}/proxy" />
		<!-- Note: proxy.properties and plugins.xml is in the individual customer config directories -->
		<copy overwrite="true" file="${proxy.config.dir}/dataSource.xml" tofile="${prelert.home.config}/proxy/dataSource.xml"/>
		<copy overwrite="true" file="${proxy.config.dir}/pluginLocator.xml" tofile="${prelert.home.config}/proxy/pluginLocator.xml"/>
		<copy overwrite="true" file="${proxy.config.dir}/prelertDAOs.xml" tofile="${prelert.home.config}/proxy/prelertDAOs.xml"/>
		<copy overwrite="true" file="${proxy.config.dir}/applicationContext.xml" tofile="${prelert.home.config}/proxy/applicationContext.xml"/>
		<copy overwrite="true" file="${proxy.config.dir}/usageDataContext.xml" tofile="${prelert.home.config}/proxy/usageDataContext.xml"/>
		<copy overwrite="true" file="${proxy.config.dir}/log4j.properties" tofile="${prelert.home.config}/proxy/log4j.properties"/>
		<copy overwrite="true" file="${proxy.config.dir}/java-security.policy" tofile="${prelert.home.config}/proxy/java-security.policy"/>

		<mkdir dir="${prelert.home.proxy}/bin"/>
		<!-- Ant copy does not preserve file permissions so we have to do it like this instead -->
		<echo message="Copying scripts to ${prelert.home.proxy}/bin" />
		
		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/startup.sh" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>
		
		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/shutdown.sh" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>
								
		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/startup.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>
		
		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/shutdown.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/installService.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/startService.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/stopService.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/uninstallService.bat" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/installPrelertService.vbs" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

		<exec executable="${copy.cmd}" >
			<arg value="${project.basedir}/bin/reportInstall.sh" />
			<arg value="${prelert.home.proxy}/bin" />
		</exec>

	</target>
	
	<target name="prelert-home-install-download" depends="build-download-product, deploy-postgres, prelert-home-deploy" 
					description="Installs the Proxy Download product for PostgreSQL into ${prelert.home.proxy}" />
	
	<target name="prelert-home-install-full" depends="build-full-product, deploy-postgres, prelert-home-deploy" 
					description="Installs the Proxy Full product for PostgreSQL into ${prelert.home.proxy}" />
	
	<target name="prelert-home-install" depends="prelert-home-install-download" />
		
	
	
	<target name="build-tests" depends="build-full-product" description="Create JUnit tests">	
		<!-- Compiles the JUnit tests -->
		<echo message="Compiling JUnit tests for Proxy" />

		<mkdir dir="${test.build.dir}"/>
		
		<path id="build_tests.classpath">
			<path refid="log4j.path" />
			<path refid="spring.path" />
			<path refid="apache-commons.path" />
		
			<pathelement location="${JUnit.location}" />
			<pathelement path="${build.dir}"/>		
			
		</path>
	
		<javac srcdir="${src.dir}" destdir="${test.build.dir}" 
			encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
			<bootclasspath>
                <path refid="boot.classpath" />
            </bootclasspath>
			<classpath>
				<path refid="build_tests.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="250"/>
		
			<include name="com/prelert/proxy/**"/> 
			<include name="com/prelert/proxy/test/**"/>

			<exclude name="com/prelert/client/**"/>
			<exclude name="com/prelert/data/gxt**"/>
			<exclude name="com/prelert/server/**"/>
			<exclude name="com/prelert/service/**"/>
			<exclude name="com/prelert/splash/**"/>
			<exclude name="com/prelert/web/**"/>
			
			<exclude name="com/prelert/proxy/plugin/**" />
		</javac>		
	</target>


	<target name="deploy-tests-mysql" depends="build-tests, deploy-mysql" description="install the MySQL configuration files">
        <mkdir dir="${tmp.test.config.dir}" />
        <mkdir dir="${tmp.proxy.config.dir}" />
        <mkdir dir="${tmp.proxy.config.dir}/datatypes" />
        <mkdir dir="${tmp.proxy.config.dir}/templates" />
        <mkdir dir="${tmp.proxy.config.dir}/plugins" />
        
        <copy overwrite="true" file="${test.config.dir}/referenceDataSourceMySQL.xml" tofile="${tmp.test.config.dir}/referenceDataSource.xml" />
		<copy overwrite="true" file="${test.config.dir}/referenceMySQLDAOs.xml" tofile="${tmp.test.config.dir}/referenceDAOs.xml" />
        <copy overwrite="true" file="${test.config.dir}/databaseManagerTestContext.xml" tofile="${tmp.test.config.dir}/databaseManagerTestContext.xml" />
        <copy overwrite="true" file="${test.config.dir}/java-security.policy" tofile="${tmp.test.config.dir}/java-security.policy" />
        <copy overwrite="true" file="${test.config.dir}/log4j.properties" tofile="${tmp.test.config.dir}/log4j.properties" />
        <copy overwrite="true" file="${test.config.dir}/tests.properties" tofile="${tmp.test.config.dir}/tests.properties" />
        
        <copy overwrite="true" file="${test.config.dir}/dataSourceMySQL.xml" tofile="${tmp.proxy.config.dir}/dataSource.xml" />
		<copy overwrite="true" file="${test.config.dir}/pluginsMySQL.xml" tofile="${tmp.proxy.config.dir}/plugins.xml" />
		<copy overwrite="true" file="${test.config.dir}/proxy.properties" tofile="${tmp.proxy.config.dir}/proxy.properties" />
        
        <copy overwrite="true" toDir="${tmp.proxy.config.dir}/datatypes"><fileset dir="${test.config.dir}/datatypes/"/></copy>
	    <copy overwrite="true" toDir="${tmp.proxy.config.dir}/templates"><fileset dir="${test.config.dir}/templates/"/></copy>
  
        <copy overwrite="true" file="${proxy.config.dir}/applicationContext.xml" tofile="${tmp.proxy.config.dir}/applicationContext.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/prelertDAOsMySQL.xml" tofile="${tmp.proxy.config.dir}/prelertDAOs.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/pluginLocatorMySQL.xml" tofile="${tmp.proxy.config.dir}/pluginLocator.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/usageDataContext.xml" tofile="${tmp.proxy.config.dir}/usageDataContext.xml" />

		<delete file="proxy.config.dir/cavstatus.properties" failonerror="false" />
	</target>
	
	
	<target name="deploy-tests-postgres" depends="build-tests, deploy-postgres" description="install the PostgreSQL configuration files">
        <mkdir dir="${tmp.test.config.dir}" />
        <mkdir dir="${tmp.proxy.config.dir}" />
        <mkdir dir="${tmp.proxy.config.dir}/datatypes" />
        <mkdir dir="${tmp.proxy.config.dir}/templates" />
        <mkdir dir="${tmp.proxy.config.dir}/plugins" />
        
        <copy overwrite="true" file="${test.config.dir}/referenceDataSourcePostgreSQL.xml" tofile="${tmp.test.config.dir}/referenceDataSource.xml" />
		<copy overwrite="true" file="${test.config.dir}/referencePostgreSQLDAOs.xml" tofile="${tmp.test.config.dir}/referenceDAOs.xml" />
        <copy overwrite="true" file="${test.config.dir}/databaseManagerTestContext.xml" tofile="${tmp.test.config.dir}/databaseManagerTestContext.xml" />
        <copy overwrite="true" file="${test.config.dir}/java-security.policy" tofile="${tmp.test.config.dir}/java-security.policy" />
        <copy overwrite="true" file="${test.config.dir}/log4j.properties" tofile="${tmp.test.config.dir}/log4j.properties" />
        <copy overwrite="true" file="${test.config.dir}/tests.properties" tofile="${tmp.test.config.dir}/tests.properties" />
        
		<copy overwrite="true" file="${test.config.dir}/dataSourcePostgreSQL.xml" tofile="${tmp.proxy.config.dir}/dataSource.xml" />
		<copy overwrite="true" file="${test.config.dir}/pluginsPostgreSQL.xml" tofile="${tmp.proxy.config.dir}/plugins.xml" />
		<copy overwrite="true" file="${test.config.dir}/proxy.properties" tofile="${tmp.proxy.config.dir}/proxy.properties" />
        
        <copy overwrite="true" toDir="${tmp.proxy.config.dir}/datatypes"><fileset dir="${test.config.dir}/datatypes/"/></copy>
	    <copy overwrite="true" toDir="${tmp.proxy.config.dir}/templates"><fileset dir="${test.config.dir}/templates/"/></copy>
                
        <copy overwrite="true" file="${proxy.config.dir}/applicationContext.xml" tofile="${tmp.proxy.config.dir}/applicationContext.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/prelertDAOsPostgreSQL.xml" tofile="${tmp.proxy.config.dir}/prelertDAOs.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/pluginLocatorPostgreSQL.xml" tofile="${tmp.proxy.config.dir}/pluginLocator.xml" />
        <copy overwrite="true" file="${proxy.config.dir}/usageDataContext.xml" tofile="${tmp.proxy.config.dir}/usageDataContext.xml" />
            
		<delete file="proxy.config.dir/cavstatus.properties" failonerror="false" />
	</target>
	
    
	<target name="proxy-test-postgres" depends="deploy-postgres, build-tests, deploy-tests-postgres" description="Run the Proxy Unit tests for PostgreSQL">
		<!-- Execute unit tests -->

		<delete file="${test.dir}/logs/proxy.log" failonerror="false" />
			
		<path id="proxy.classpath">
			<path refid="log4j.path" />
			<path refid="spring.path" />
			<path refid="apache-commons.path" />
			<path refid="postgreSQL.connector" />
			<path refid="plugin.dependencies.path" />
		    <path refid="introscopeClw9.path" />
	
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
			<pathelement path="${build.dir}"/>	
			<pathelement location="${tmp.proxy.config.dir}"/>		
			<pathelement location="${tmp.proxy.config.dir}/plugins"/>		
		</path>
					
		<!-- Start the Proxy -->
		<echo message="Start the Proxy" />
		<!-- This MUST run in a forked JVM, otherwise the shutdown test will shut down Ant! -->
		<java fork="true" spawn="true" classname="com.prelert.proxy.Proxy" >
			<jvmarg value="-Djava.security.policy=${tmp.test.config.dir}/java-security.policy" />
			<jvmarg value="-Dpg.user=${pg.user}" />
            <!-- The unit tests use a log4j.properties file that logs to stderr rather than a file -->
			<jvmarg value="-Dlog4j.configuration=file:///${tmp.test.config.dir}/log4j.properties" />
			<jvmarg value="-Dprelert.test.logs=${test.dir}/logs" />
            <jvmarg value="-Dprelert.config.dir=${tmp.proxy.config.dir}" />
			<classpath>
				<path refid="proxy.classpath" />		
			</classpath>
		</java>

		<!-- Give the Proxy time to initialise (it's slow on Solaris) -->
		<echo message="Waiting for Proxy initialisation" />
		<sleep seconds="10" />

		<path id="tests.classpath">
			<path refid="log4j.path" />
			<path refid="spring.path" />
			<path refid="apache-commons.path" />
			<path refid="postgreSQL.connector" />
			<path refid="plugin.dependencies.path" />
				
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
            <pathelement path="${build.dir}"/>
			<pathelement path="${test.build.dir}"/>	
			<pathelement path="${tmp.test.config.dir}" />
			<pathelement location="${JUnit.location}" />
		</path>

		<echo message="Run the tests" />
		<!-- The shutdown test is required to shut down the proxy forked above -->
		<!-- Therefore, don't halt immediately on a failure, but after all tests have been attempted -->
		<junit fork="yes" failureproperty="proxy_test_postgres.failed">
			<jvmarg value="-Djava.security.policy=${tmp.test.config.dir}/java-security.policy" />
			<jvmarg value="-Dpg.user=${pg.user}" />
			<!-- The unit tests use a log4j.properties file that is different to the one we ship -->
			<jvmarg value="-Dlog4j.configuration=file:///${tmp.test.config.dir}/log4j.properties" />
			<jvmarg value="-Dprelert.test.logs=${test.dir}/logs" />

			<test name="com.prelert.proxy.test.TCPClientTest" />
			<test name="com.prelert.proxy.test.TestRMIConnection" /> 
	        <test name="com.prelert.proxy.test.RemoteCausalityTest" />
			<test name="com.prelert.proxy.test.RemoteDataSourceTest" />
			<test name="com.prelert.proxy.test.RemoteEvidenceTest" />
			<test name="com.prelert.proxy.test.RemoteIncidentTest" />
			<test name="com.prelert.proxy.test.RemoteTimeSeriesTest" /> 
            <test name="com.prelert.proxy.test.RemoteConfigTest" />
            <test name="com.prelert.proxy.test.ConfigurationManagerTest" />
            <!-- This test modifies the 'reference' database so should run after the Remote*Tests. -->
            <test name="com.prelert.proxy.test.InputManagerDAOTest" /> 
            
			<!-- This test deletes data from the database, so must come after
				all other tests that use the database -->
            <test name="com.prelert.proxy.test.DatabaseManagerTest" />
            
			<!-- This test must be the very last one -->
			<test name="com.prelert.proxy.test.ShutdownTest" />

			<formatter type="plain" usefile="false" />
			<classpath refid="tests.classpath" />
		</junit>

		<fail if="proxy_test_postgres.failed" message="Proxy tests failed for PostgreSQL" />		
	</target>
		
		
	<target name="proxy-test-mysql" depends="deploy-mysql, build-tests, deploy-tests-mysql" description="Run the Proxy Unit tests for MySQL">
		<!-- Execute unit tests -->
		<delete file="${test.dir}/logs/proxy.log" failonerror="false" />
		
		<path id="proxy.classpath">
			<path refid="log4j.path" />
			<path refid="spring.path" />
			<path refid="apache-commons.path" />
			<path refid="mySQL.connector" />
			<path refid="plugin.dependencies.path" />
		    <path refid="introscopeClw9.path" />
				
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
			<pathelement path="${build.dir}"/>	
			<pathelement location="${tmp.proxy.config.dir}"/>		
			<pathelement location="${tmp.proxy.config.dir}/plugins"/>		
		</path>
					
		<!-- Start the Proxy -->
		<echo message="Start the Proxy" />
		<!-- This MUST run in a forked JVM, otherwise the shutdown test will shut down Ant! -->
		<java fork="true" spawn="true" classname="com.prelert.proxy.Proxy" >
			<jvmarg value="-Djava.security.policy=${tmp.test.config.dir}/java-security.policy" />
            <!-- The unit tests use a log4j.properties file that logs to stderr rather than a file -->
			<jvmarg value="-Dlog4j.configuration=file:///${tmp.test.config.dir}/log4j.properties" />          
            <jvmarg value="-Dprelert.test.logs=${test.dir}/logs" />
            <jvmarg value="-Dprelert.config.dir=${tmp.proxy.config.dir}" />
            
			<classpath>
				<path refid="proxy.classpath" />		
			</classpath>
		</java>

		<!-- Give the Proxy time to initialise (it's slow on Solaris) -->
		<echo message="Waiting for Proxy initialisation" />
		<sleep seconds="10" />

		<path id="tests.classpath">
			<path refid="log4j.path" />
			<path refid="spring.path" />
			<path refid="apache-commons.path" />
			<path refid="mySQL.connector" />
			<path refid="plugin.dependencies.path" />
				
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
            <pathelement path="${build.dir}" />
			<pathelement path="${test.build.dir}" />
			<pathelement path="${tmp.test.config.dir}" />
			<pathelement location="${JUnit.location}" />
		</path>

		<echo message="Run the tests" />
		<!-- The shutdown test is required to shut down the proxy forked above -->
		<!-- Therefore, don't halt immediately on a failure, but after all tests have been attempted -->
		
		<junit fork="yes" failureproperty="proxy_test_mysql.failed">
			<jvmarg value="-Djava.security.policy=${tmp.test.config.dir}/java-security.policy" />
			<!-- The unit tests use a log4j.properties file that is different to the one we ship -->
			<jvmarg value="-Dlog4j.configuration=file:///${tmp.test.config.dir}/log4j.properties" />
			<jvmarg value="-Dprelert.test.logs=${test.dir}/logs" />

			<test name="com.prelert.proxy.test.TCPClientTest" />
            <test name="com.prelert.proxy.test.TestRMIConnection" /> 
            <test name="com.prelert.proxy.test.RemoteCausalityTest" />
			<test name="com.prelert.proxy.test.RemoteDataSourceTest" />
			<test name="com.prelert.proxy.test.RemoteEvidenceTest" />
			<test name="com.prelert.proxy.test.RemoteIncidentTest" />
			<test name="com.prelert.proxy.test.RemoteTimeSeriesTest" /> 
            <test name="com.prelert.proxy.test.RemoteConfigTest" /> 
            <test name="com.prelert.proxy.test.ConfigurationManagerTest" />
            <!-- This test modifies the 'reference' database so should run after the Remote*Tests. -->
            <test name="com.prelert.proxy.test.InputManagerDAOTest" />
            
			<!-- This test deletes data from the database, so must come after
				all other tests that use the database -->
            <test name="com.prelert.proxy.test.DatabaseManagerTest" />
			<!-- This test must be the very last one -->
			<test name="com.prelert.proxy.test.ShutdownTest" />

			<formatter type="plain" usefile="false" />
			<classpath refid="tests.classpath" />
		</junit>
		<fail if="proxy_test_mysql.failed" message="Proxy tests failed for MySQL" />
	</target>
	
	<target name="setup-test-database-mysql" description="Installs the MySQL databases required by the Proxy tests">
		<exec executable="sh" dir="${test.dir}/bin" >
			<arg value="-c" />
			<arg value="./install_test_database_mysql.sh" />
		</exec>
	</target>
	
	<target name="setup-test-database-postgresql" description="Installs the PostgreSQL databases required by the Proxy tests">
		<exec executable="sh" dir="${test.dir}/bin" >
			<arg value="-c" />
			<arg value="./install_test_database_postgresql.sh" />
		</exec>
	</target>
		
	<target name="proxy-tests" depends="setup-test-database-mysql, proxy-test-mysql, setup-test-database-postgresql, proxy-test-postgres" description="Run the Proxy Unit tests for MySQL and PostgreSQL.">
    </target>


	<target name="clean" depends="clean-plugins" description="Clean .class files from output directories">

		<delete file="${src.dir}/com/prelert/proxy/runpolicy/RunPolicy.java" failonerror="false" verbose="true" />

		<echo message="Cleaning Proxy classes" />

		<mkdir dir="${build.dir}" />

		<!-- Delete the server-side classes -->
		<delete>
			<fileset dir="${build.dir}">
				<include name="**/*.class"/>
			</fileset>
		</delete>
		
	</target>
	
	<target name="clean-tests" description="Clean .class files from the Test directory">
		<!-- Delete the unit test classes -->
		<echo message="Cleaning test classes" />
		<delete>
			<fileset dir="${test.build.dir}">
				<include name="**/*.class"/>
			</fileset>
		</delete>

        <!-- Delete old build directory, now builds into ${test.dir}/build. 
            This can be deleted once builds have been cleaned up. 2012/05/22 -->
        <delete failonerror="false" verbose="true" dir="${test.dir}/com" />

		<!-- The config files -->
		<delete failonerror="false" verbose="true" dir="${tmp.proxy.config.dir}" />
        <delete failonerror="false" verbose="true" dir="${tmp.test.config.dir}" />
	</target>

	<target name="clean-all" depends="clean, clean-tests" description="Clean all Proxy and test case .class files">

	</target>


	<target name="codedrop" description="Copies source code and associated files to single directory">
		<echo message="Copying source to single directory" />
		
		<property name="temp.dir" value="${project.basedir}/temp"/>
		<mkdir dir="${temp.dir}" />

		<mkdir dir="${code.drop.dir}" />

		<!-- Copy the build files -->
		<copy todir="${temp.dir}">
			<fileset dir="${project.basedir}">
				<include name="build.xml" />
				<include name="build_linux.properties" />
				<include name="build_osx.properties" />
				<include name="build_solaris.properties" />
				<include name="build_win.properties" />
			</fileset>
		</copy>

		<!-- Copy the Java source files -->
		<copy todir="${temp.dir}/src">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<!-- Zip up the backup directory -->
		<delete file="${code.drop.dir}/proxy.zip"/>
		<zip destfile="${code.drop.dir}/proxy.zip" basedir="${temp.dir}" />
		
		<delete dir="${temp.dir}" />

	</target>

</project>
