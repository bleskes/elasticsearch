<?xml version="1.0" encoding="UTF-8"?>
<project name="Prelert Anomaly UI" default="build" basedir=".">
	<description>
		Build file for the Prelert Anomaly Chart UI
	</description>

	<property environment="env" />

	<!-- Set base directory properties -->
	<property name="project.basedir" value="." />
	<property name="java.basedir" value="../.." />
	<property name="resources" location="${java.basedir}/resources" />

	<!-- Read Platfrom specfic property file -->
	<condition property="property_file" value="${resources}/ant/build_linux.properties">
		<os name="Linux" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_osx.properties">
		<os family="mac" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_solaris_sparc.properties">
		<os name="SunOS" arch="sparc" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_solaris_x86.properties">
		<os name="SunOS" />
	</condition>
	<property name="libs.dir" location="${project.basedir}/libs" />


	<!-- Before checking for Windows, check if we're running within an msysgit shell -->
	<condition property="property_file" value="${resources}/ant/build_mingw.properties">
		<isset property="env.MSYSTEM" />
	</condition>

	<condition property="property_file" value="${resources}/ant/build_win.properties">
		<!-- Due to the test above, this means native Windows -->
		<os family="windows" />
	</condition>

	<fail message="Could not set plaftorm property file">
		<condition>
			<not>
				<isset property="property_file" />
			</not>
		</condition>
	</fail>

	<echo message="Using ${property_file}" />

	<property file="${property_file}" />


	<!-- Set global properties for this build -->
	<property name="name" value="prelertAnomalyUI" />
	<property name="src.dir" location="${java.basedir}/src/main" />
	<property name="src.config" location="${resources}/config" />
	<property name="src.war" location="${project.basedir}/war" />
	<property name="build.dir" location="${project.basedir}/build" />
	<property name="build.web.dir" value="${build.dir}/war" />
	<property name="test.dir" location="${project.basedir}/tests" />
	<property name="test.build.dir" location="${test.dir}/build" />
	<property name="git.basedir" location="${java.basedir}/.." />
	<property name="prelert.home" location="${env.PRELERT_HOME}" />
	<property name="prelert.src.home" location="${env.PRELERT_SRC_HOME}" />
	<property name="apache.basedir" location="${libs.basedir}/apache" />
	<property name="apache.commons.basedir" location="${apache.basedir}/commons" />
	<property name="extjs.basedir" location="${javascript.tools.basedir}/ext-4.2.2.1144" />

	<property name="code.drop.dir" value="${project.basedir}/backup" />

	<!-- boot classpath -->
	<path id="boot.classpath">
		<fileset dir="${java6.bootstrap.path}">
			<include name="rt.jar" />
		</fileset>
	</path>

	<!-- Required jar files -->
	<path id="build.classpath">

		<!-- log4j JAR -->
		<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
			<include name="log4j-1.2.16.jar" />
		</fileset>

		<!-- commons logging -->
		<fileset dir="${apache.basedir}/commons/commons-logging-1.1.1">
			<include name="commons-logging-1.1.1.jar" />
		</fileset>

		<!-- Spring JARs -->
		<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
			<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
			<include name="org.springframework.context-3.0.5.RELEASE.jar" />
			<include name="org.springframework.core-3.0.5.RELEASE.jar" />
			<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
			<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web-3.0.5.RELEASE.jar" />
			<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
		</fileset>

		<!-- json-simple JAR -->
		<fileset dir="${libs.basedir}/json-simple">
			<include name="json-simple-1.1.1.jar" />
		</fileset>

		<!-- Jackson JSON processing JARs -->
		<!-- Note that Spring 3.0.x only work works Jackson 1.x -->
		<!--
		<fileset dir="${libs.basedir}/jackson-2.2.3">
            <include name="jackson-annotations-2.2.3.jar" />
			<include name="jackson-core-2.2.3.jar" />
			<include name="jackson-databind-2.2.3.jar" />
        </fileset>
        -->
		<fileset dir="${libs.basedir}/hadoop-1.2.1/lib">
			<include name="jackson-core-asl-1.8.8.jar" />
			<include name="jackson-mapper-asl-1.8.8.jar" />
		</fileset>
		
		<!-- elasticsearch JARs -->
		<fileset dir="${libs.basedir}/elasticsearch-1.0.0.Beta2/lib">
			<include name="elasticsearch-1.0.0.Beta2.jar" />
			<include name="lucene-analyzers-common-4.6.0.jar" />
			<include name="lucene-core-4.6.0.jar" />
			<include name="lucene-highlighter-4.6.0.jar" />
			<include name="lucene-join-4.6.0.jar" />
			<include name="lucene-queries-4.6.0.jar" />
			<include name="lucene-queryparser-4.6.0.jar" />
			<include name="lucene-sandbox-4.6.0.jar" />
		</fileset>

	</path>


	<!-- clean -->
	<target name="clean" description="Clean .class files from the output directories">

		<!-- It's crucial to delete the .war file itself, because otherwise
			Ant won't regenerate it in the case where config files HAVE
			changed but Java source files HAVEN'T changed -->
		<delete file="${build.dir}/${name}.war" failonerror="false" verbose="true" />

		<!-- Delete the properties files -->
		<delete>
			<fileset dir="${src.war}/WEB-INF/classes">
				<include name="*" />
			</fileset>
		</delete>

		<!-- Delete the server-side classes -->
		<delete>
			<fileset dir="${src.war}/WEB-INF/classes">
				<include name="**/*.class" />
			</fileset>
		</delete>

		<delete dir="${build.web.dir}" />
	</target>


	<!-- compile -->
	<target name="compile" description="Compile the Java source code">
		<echo message="Compiling Java source" />

		<mkdir dir="${src.war}/WEB-INF/classes" />

		<!-- setting sourcepath="" means only files explicity included are compiled -->
		<javac sourcepath="" srcdir="${src.dir}" destdir="${src.war}/WEB-INF/classes" encoding="utf-8" source="1.6" target="1.6" deprecation="off" includeantruntime="false">
			<bootclasspath>
				<path refid="boot.classpath" />
			</bootclasspath>

			<classpath>
				<path refid="build.classpath" />
			</classpath>
			<compilerarg value="-Xmaxerrs" />
			<compilerarg value="250" />

			<include name="com/prelert/anomalyui/**" />
			<exclude name="com/prelert/anomalyui/EktorpCouchDBTest.java" />
		</javac>

		<echo message="Copying resources for JAR file" />

		<!--
		<copy file="${src.config}/log4j.properties" todir="${src.war}/WEB-INF/classes" />
		-->

	</target>



	<target name="build" depends="compile" description="Builds the WAR file for the anomaly UI">

		<echo message="Building the WAR file for the anomaly UI web application" />

		<!-- Copy the Spring applicationContext.xml file -->
		<delete file="${build.web.dir}/WEB-INF/applicationContext.xml" />
		<copy file="${src.war}/WEB-INF/applicationContext.xml" todir="${build.web.dir}/WEB-INF" />


		<mkdir dir="${build.web.dir}" />
		<mkdir dir="${build.web.dir}/css" />
		<mkdir dir="${build.web.dir}/images" />
		<mkdir dir="${build.web.dir}/thirdparty" />
		<mkdir dir="${build.web.dir}/WEB-INF/jsp" />
		<mkdir dir="${build.web.dir}/WEB-INF/lib" />

		<!-- Copy the static content -->
		<copy todir="${build.web.dir}">
			<fileset dir="${src.war}">
				<include name="*.jsp" />
				<include name="*.html" />
				<include name="*.js" />
				<include name="prelert_icon.ico" />
			</fileset>
		</copy>

		<copy file="${resources}/prelert_icon.ico" tofile="${src.war}/prelert_icon.ico" />
		<copy todir="${build.web.dir}/css">
			<fileset dir="${src.war}/css" />
		</copy>
		<copy todir="${build.web.dir}/images">
			<fileset dir="${src.war}/images" />
		</copy>

		<!-- Copy the ExtJS components -->
		<copy todir="${build.web.dir}/extjs">
			<fileset dir="${extjs.basedir}">
				<include name="ext-all-debug.js" />
			</fileset>
		</copy>
		<copy todir="${build.web.dir}/extjs/resources/css">
			<fileset dir="${extjs.basedir}/resources/css" />
		</copy>
		<copy todir="${build.web.dir}/extjs/resources/ext-theme-classic">
			<fileset dir="${extjs.basedir}/resources/ext-theme-classic" />
		</copy>

		<!-- Copy JavaScript libraries -->
		<copy todir="${build.web.dir}/thirdparty">
			<fileset dir="${javascript.tools.basedir}/jquery-1.10.2">
				<include name="jquery-1.10.2.min.js" />
			</fileset>
		</copy>
		<mkdir dir="${build.web.dir}/thirdparty/highcharts" />
		<copy todir="${build.web.dir}/thirdparty/highcharts">
			<fileset dir="${javascript.tools.basedir}/Highcharts-3.0.7/js">
				<include name="highcharts.js" />
			</fileset>
			<fileset dir="${javascript.tools.basedir}/Highcharts-3.0.7/js/themes">
				<include name="gray.js" />
			</fileset>
		</copy>
		<mkdir dir="${build.web.dir}/thirdparty/flot" />
		<copy todir="${build.web.dir}/thirdparty/flot">
			<fileset dir="${javascript.tools.basedir}/flot-0.8.1">
				<include name="jquery.flot.js" />
				<include name="jquery.flot.resize.js" />
				<include name="jquery.flot.selection.js" />
				<include name="jquery.flot.time.js" />
			</fileset>
		</copy>

		<!-- Copy the JSPs -->
		<copy todir="${build.web.dir}/WEB-INF/jsp">
			<fileset dir="${src.war}/WEB-INF/jsp" />
		</copy>

		<!-- Copy the Spring bean definition file to the WEB-INF directory -->
		<copy todir="${build.web.dir}/WEB-INF">
			<fileset dir="${src.war}/WEB-INF">
				<include name="dispatcher-servlet.xml" />
			</fileset>
		</copy>

		<copy file="${project.basedir}/log4j.properties" todir="${src.war}/WEB-INF/classes" />
		<copy file="${src.war}/WEB-INF/web.xml" tofile="${build.web.dir}/WEB-INF/web.xml" />

		<!-- JAR up the server-side classes -->
		<jar destfile="${build.web.dir}/WEB-INF/lib/${name}.jar" basedir="${src.war}/WEB-INF/classes">
		</jar>

		<!-- Copy the necessary JARs to the WEB-INF/lib directory -->
		<copy todir="${build.web.dir}/WEB-INF/lib">

			<!-- log4j JAR -->
			<fileset dir="${apache.basedir}/apache-log4j-1.2.16">
				<include name="log4j-1.2.16.jar" />
			</fileset>

			<!-- Apache Commons JARs -->
			<fileset dir="${apache.commons.basedir}/commons-fileupload-1.3/lib">
				<include name="commons-fileupload-1.3.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-io-2.4">
				<include name="commons-io-2.4.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-lang-2.6">
				<include name="commons-lang-2.6.jar" />
			</fileset>
			<fileset dir="${apache.commons.basedir}/commons-logging-1.1.1">
				<include name="commons-logging-1.1.1.jar" />
			</fileset>

			<!-- Spring JARs -->
			<fileset dir="${libs.basedir}/spring-framework-3.0.5/dist">
				<include name="org.springframework.aop-3.0.5.RELEASE.jar" />
				<include name="org.springframework.asm-3.0.5.RELEASE.jar" />
				<include name="org.springframework.beans-3.0.5.RELEASE.jar" />
				<include name="org.springframework.context-3.0.5.RELEASE.jar" />
				<include name="org.springframework.core-3.0.5.RELEASE.jar" />
				<include name="org.springframework.expression-3.0.5.RELEASE.jar" />
				<include name="org.springframework.jdbc-3.0.5.RELEASE.jar" />
				<include name="org.springframework.transaction-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web-3.0.5.RELEASE.jar" />
				<include name="org.springframework.web.servlet-3.0.5.RELEASE.jar" />
			</fileset>
			<fileset dir="${libs.basedir}/aopalliance-1.0">
				<include name="aopalliance.jar" />
			</fileset>
			
			<!-- elasticsearch JARs -->
			<fileset dir="${libs.basedir}/elasticsearch-1.0.0.Beta2/lib">
				<include name="elasticsearch-1.0.0.Beta2.jar" />
				<include name="lucene-analyzers-common-4.6.0.jar" />
				<include name="lucene-core-4.6.0.jar" />
				<include name="lucene-highlighter-4.6.0.jar" />
				<include name="lucene-join-4.6.0.jar" />
				<include name="lucene-queries-4.6.0.jar" />
				<include name="lucene-queryparser-4.6.0.jar" />
				<include name="lucene-sandbox-4.6.0.jar" />
			</fileset>

			<!-- JSTL JARs -->
			<fileset dir="${apache.basedir}/jakarta-taglibs-standard-1.1.2/lib">
				<include name="jstl.jar" />
				<include name="standard.jar" />
			</fileset>

			<!-- Super CSV JARs - do we need this or just accept JSON format? -->
			<fileset dir="${libs.basedir}/SuperCSV-1.52">
				<include name="spiffy-with_source-all-0.05.jar" />
				<include name="SuperCSV-1.52.jar" />
			</fileset>

			<!-- json-simple JAR -->
			<fileset dir="${libs.basedir}/json-simple">
				<include name="json-simple-1.1.1.jar" />
			</fileset>

			<!-- Jackson JSON processing JARs -->
			<!-- Note that Spring 3.0.x only work works Jackson 1.x -->
			<!--
			<fileset dir="${libs.basedir}/jackson-2.2.3">
	            <include name="jackson-annotations-2.2.3.jar" />
				<include name="jackson-core-2.2.3.jar" />
				<include name="jackson-databind-2.2.3.jar" />
	        </fileset>
	        -->
			<fileset dir="${libs.basedir}/hadoop-1.2.1/lib">
				<include name="jackson-core-asl-1.8.8.jar" />
				<include name="jackson-mapper-asl-1.8.8.jar" />
			</fileset>

		</copy>

		<!-- Build the WAR file -->
		<jar jarfile="${build.dir}/${name}.war" basedir="${build.web.dir}" excludes="**/Thumbs.db" />
	</target>


	<target name="deploy" depends="build" description="Deploys the Anomaly UI web application to Tomcat">
		<echo message="Deploying the Anomaly UI web application to Tomcat" />

		<!-- Copy the WAR file to the Tomcat webapps directory -->
		<delete dir="${deploy.path}/${name}" />
		<copy file="${build.dir}/${name}.war" todir="${deploy.path}" />

	</target>


	<target name="codedrop" description="Copies source code and associated files to single directory">
		<echo message="Copying source to single directory" />

		<mkdir dir="${code.drop.dir}" />
		<mkdir dir="${code.drop.dir}/src/main" />
		<mkdir dir="${code.drop.dir}/war" />

		<!-- Copy the build files -->
		<copy todir="${code.drop.dir}">
			<fileset dir="${project.basedir}">
				<include name="build.xml" />
				<include name="*.properties" />
			</fileset>
		</copy>

		<!-- Copy the UI Java source files -->
		<copy todir="${code.drop.dir}/src/main">
			<fileset dir="${src.dir}">
				<include name="com/prelert/anomalyui/**" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<!-- Copy the html pages, CSS stylesheets and images -->
		<copy todir="${code.drop.dir}/war">
			<fileset dir="${src.war}">
				<include name="*.html" />
				<include name="*.css" />
				<include name="*.ico" />
				<include name="*.jsp" />
			</fileset>
		</copy>
		<copy todir="${code.drop.dir}/war/css">
			<fileset dir="${src.war}/css" />
		</copy>
		<copy todir="${code.drop.dir}/war/images">
			<fileset dir="${src.war}/images" />
		</copy>

		<!-- Copy the web files -->
		<copy todir="${code.drop.dir}/war/WEB-INF">
			<fileset dir="${src.war}/WEB-INF">
				<include name="**/*.jsp" />
				<include name="**/*.properties" />
				<include name="*.xml" />
			</fileset>
		</copy>

		<!-- Zip up the backup directory -->
		<delete file="${code.drop.dir}/${name}.zip" />
		<zip destfile="${code.drop.dir}/${name}.zip" basedir="${code.drop.dir}" />

	</target>


</project>
