[role="xpack"]
[[graph-explore]]
=== Explore API

The graph explore API ...

==== Request

`POST <index>/_xpack/graph/_explore`


==== Description

After an initial search users typically want to review the results using a form
of graph visualization tool like the one in the Kibana Graph UI. Users will
frequently then select one or more vertices of interest and ask to load more
vertices that may be connected to their current selection. In graph-speak,
this operation is often called _spidering_ or _spidering out_.

In order to spider out it is typically necessary to define two things:

 * The set of vertices from which you would like to spider
 * The set of vertices you already have in your workspace which you want to avoid seeing again in results

These two pieces of information when passed to the Graph API will ensure you are returned new vertices that can be attached to the existing selection.
An example request is as follows:

[source,js]
--------------------------------------------------
POST clicklogs/_xpack/_graph/_explore
{
   "vertices": [
      {
         "field": "product",
         "include": [ "1854873" ] <1>
      }
   ],
   "connections": {
      "vertices": [
         {
            "field": "query.raw",
            "exclude": [ <2>
               "midi keyboard",
               "midi",
               "synth"
            ]
         }
      ]
   }
}
--------------------------------------------------
// CONSOLE
<1> Here we list the mandatory start points from which we want to spider using an `include` array of the terms of interest (in this case a single product code). Note that because
we have an `include` clause here there is no need to define a seed query - we are implicitly querying for documents that contain any of the terms
listed in our include clauses. Instead of passing plain strings in this array it is also possible to pass objects with `term` and `boost` values to
boost matches on certain terms over others.
<2> The `exclude` clause avoids returning specific terms. Here we are asking for more search terms that have led people to click on product 1854873 but explicitly exclude the search terms the client already
knows about.

The `include`and `exclude` clauses provide the essential features that enable clients to progressively build up a picture of related information in their workspace.
The `include` clause is used to define the set of start points from which users wish to spider. Include clauses can also be used to limit the end points users wish to reach, thereby "filling in" some of the missing links between existing vertices in their client-side workspace.
The `exclude` clause can be used to avoid the Graph API returning vertices already visible in a client's workspace or perhaps could list undesirable vertices that the client has blacklisted from their workspace and never wants to see returned.
